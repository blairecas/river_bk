	.title	RIVER
	.enabl	LC, AMA
	.asect
	.=1000

@include acommon.mac

Start:	mov	#1000, SP
	mtps	#200
	; backup ints
	mov	@#4, -(SP)
	mov	@#6, -(SP)
	mov	@#60, -(SP)
	mov	@#62, -(SP)
	mov	@#100, -(SP)
	mov	@#102, -(SP)
	mov	@#274, -(SP)
	mov	@#276, -(SP)
	mov	SP, Stop+2
	; set stop
	mov	#Stop, @#4
	mov	#200, @#6
	; check for BK 0011(M)
	clr	@#100				; use this addr as flag for BK 0010
	cmpb	@#177717, #300
	bne	10$
	mov	#C_RAM_BANKS54, @#177716	; banks 5 4 (andos standard bank 4 on 100000)
	clrb	@#177663			; vsync on, screen buf 5, palette 0
	mov	#VsyInt, @#100
	mov	#200, @#102
	mov	#1200, TimerCycle
	mov	#2, TimerLine
10$:	; keyboard interrupts
	mov	#KbdInt, @#60
	clr	@#62
	mov	#Kbd274, @#274
	clr	@#276
	bic	#^B01000000, @#177660		; allow keyboard interrupt
	; set timer to screen refresh length
TimerCycle =: .+2
	mov	#740, @#177706
	mov	#20, @#177712			; start timer, max speed

	; set joystick bad bits
	clr	@#177714			; turn off mouse?
	clr	JoyBadBits
	clr	R0
	bis	@#177714, JoyBadBits
	sob	R0, .-6

Stop:	; stop key goes here 
	; (!) mutable SP addr
	mov	#1000, SP
	mov	#200, @#177716			; speaker DC to low (not high?)
	; clear ram
	mov	#End, R0
	mov	#100000-End/2, R3
	clr	(R0)+
	sob	R3, .-2
	mov	#1330, @#177664			; roll screen to 0
	; all is set then
	mtps	#0

	; wait a bit, then finish init
	clr	R0
	sob	R0, .
	tst	@#177662			; read keyboard reg just in case

	; go to main game cycle
	clr	CurrentMode
	br	MainCycle

Exit:	; exit to somewhere
	call	ClearScreen
	mov	#1330, @#177664
	; restore ints
	mtps	#200
	tst	@#100
	beq	10$
	movb	#^B01000000, @#177663
10$:	mov	#1000, SP
	mov	-(SP), @#4
	mov	-(SP), @#6
	mov	-(SP), @#60
	mov	-(SP), @#62
	mov	-(SP), @#100
	mov	-(SP), @#102
	mov	-(SP), @#274
	mov	-(SP), @#276
	mov	#100004, R0			; check 'standard' ROM at 100000
	mov	-(R0), R1
	add	-(R0), R1
	cmp	R1, #167+254
	beq	99$				; seems we have it
	mov	@#177716, R0			; else go to reset addr
	clrb	R0
99$:	jmp	(R0)


; //////////////////////////////////////////////////////////////////////////////
; // Main
; //////////////////////////////////////////////////////////////////////////////

; main game cycle
MainCycle:
	call	VSyncWait			; vsync wait cycle
	mov	CurrentMode, R0
	asl	R0
	call	@MainCycleTbl(R0)		; run procedures
	br	MainCycle

MainCycleTbl:	.word	MainMenuInit, MainMenu, MainInit, MainScrollInto, MainWaitGame, MainGame, MainAfterCrash, MainLiveLost


; menu prepare
MainMenuInit:
	call	ClearScreen
	mov	#MenuData, R0
	mov	#50.*C_SCRWID+C_VADDR, R1
	call	Unpack
	; line of
	mov	#C_MENU_Y-7.*C_SCRWID+14.+C_VADDR, R0
	call	BlueLine
	; 1 - joy
	call	PrintSp
	.word	C_MENU_Y*C_SCRWID+14.+C_VADDR
	.word	MsgMenu01
	; 2 - vsync (only for BK0010)
	call	PrintSp
	.word	C_MENU_Y+11.*C_SCRWID+14.+C_VADDR
	.word	MsgMenu02
	tst	@#100
	beq	10$
	mov	#C_MENU_Y+11.*C_SCRWID+14.+C_VADDR, R1
	mov	#30., R2
	call	DarkenVaddr
10$:	; 3 - sound
	call	PrintSp
	.word	C_MENU_Y+21.*C_SCRWID+14.+C_VADDR
	.word	MsgMenu03
	mov	#C_MENU_Y+21.*C_SCRWID+34.+C_VADDR, PrintVaddr
	mov	#MsgOn, R0
	tst	SoundOn
	bne	20$
	mov	#MsgOff, R0
20$:	call	Print
	; 4 - debug
	call	PrintSp
	.word	C_MENU_Y+32.*C_SCRWID+14.+C_VADDR
	.word	MsgMenu04
	mov	#C_MENU_Y+32.*C_SCRWID+34.+C_VADDR, PrintVaddr
	mov	#MsgOn, R0
	tst	DebugOn
	bne	30$
	mov	#MsgOff, R0
30$:	call	Print
	; 0 - quit
	call	PrintSp
	.word	C_MENU_Y+43.*C_SCRWID+14.+C_VADDR
	.word	MsgMenu00
	; line of
	mov	#C_MENU_Y+56.*C_SCRWID+14.+C_VADDR, R0
	call	BlueLine
	; space - start
	call	PrintSp
	.word	C_MENU_Y+71.*C_SCRWID+7.+C_VADDR
	.word	MsgMenuSt
	; next 
	inc	CurrentMode
	return


; menu (wait key)
MainMenu:
	clr	PpuKeys
	clr	UsedKeys
10$:	call	RememberKeys
	bit	#P_KEY_FIRE, UsedKeys
	bne	90$
	mov	KeyCur, R0
	beq	10$
	clr	KeyCur
	; 1 - setup joystick
	cmp	R0, #'1
	bne	20$
	call	JoySetup
18$:	clr	CurrentMode
	return
20$:	; 2 - setup vsync (only for BK0010)
	cmp	R0, #'2
	bne	30$
	tst	@#100				; check for BK0010
	bne	10$
	call	SetupTimer
	br	18$
30$:	; 3 - sound on/off
	cmp	R0, #'3
	bne	40$
	mov	#C_MENU_Y+21.*C_SCRWID+34.+C_VADDR, PrintVaddr
	mov	#MsgOn, R0
SoundOn =: .+2
	com	#177777
	bne	32$
	mov	#MsgOff, R0
32$:	call	Print
	return
40$:	; 4 - debug on/off
	cmp	R0, #'4
	bne	50$
	mov	#C_MENU_Y+32.*C_SCRWID+34.+C_VADDR, PrintVaddr
	mov	#MsgOn, R0
DebugOn =: .+2
	com	#000000
	bne	42$
	mov	#MsgOff, R0
42$:	call	Print
	return
50$:	; 0 - exit
	cmp	R0, #'0
	bne	10$
	jmp	Exit
90$:	; space - start game
	clr	PpuKeys
	clr	UsedKeys
	inc	CurrentMode
	return


; first stage - init
MainInit:	
	clr	Level
	clr	SLevel				; stored level (will continue from it after crash)
	mov	#126341, RandLo			; reset random
	call	PrepareVars			; game vars from live lost
	call	ClearScreen
	call	Rotate
	inc	CurrentMode
	return


; second stage - scroll field into view 
MainScrollInto:
	call	SetScroll
	call	DrawFirstLines
	call	DrawObjects			; draw block objects
	tstb	ScrollY         		; are we at start?
	beq	90$
	call	Rotate				; one line of rotation
	return
90$:	call	DrawPlane			; draw the plane
	inc	CurrentMode
	return


; wait for game key press
MainWaitGame:
	clr	UsedKeys
10$:	call	RememberKeys
	tst	UsedKeys
	beq	10$
	clr	UsedKeys
	clr	PpuKeys
	inc	CurrentMode
	return


; play cycle
MainGame:
	; clrb	@#177663
	call	SetScroll			; set screen scroll register
	call	DrawFirstLines			; draw first line(s) asap
	call	RemoveMissile			; (maybe) remove old missile
	call	DrawMissile			; (maybe) draw new missile
	call	XorPlane			; remove old plane
	call	DrawObjects			; draw block objects
	call	ProcObjects			; process objects moving etc.
	call	PlaneColGnd			; check plane collision with ground
	call	DrawPlane			; draw plane
	call	RememberKeys			; remember keys pressed at this point
	call	PlaneKeys			; process plane keys
	call	ProcMissile			; process missile
	call	Rotate				; lines rotation
	call	PlaneCollision			; check plane collision
	call	MissCollision			; check missile collision with objects
	call	MissGround			; check missile collision with ground
	; movb	#1, @#177663
	return


; wait some after crash
MainAfterCrash:
	inc	CurrentMode
	return


; live lost - init last bridge variables or game over
MainLiveLost:
	mov	RandStore, RandLo		; restore random saved at a bridge
	mov	SLevel, Level			; restore level
	dec	Level				; will be increaset at Rotate 
	call	ClearScreen
	call	PrepareVars			; game vars from live lost
	call	Rotate
	mov	#C_MODE_PREPARE, CurrentMode	; second stage again
	return
	

; //////////////////////////////////////////////////////////////////////////////
; // UTILS, DEBUG, ETC
; //////////////////////////////////////////////////////////////////////////////

; empty procedure
RetAdr:	return


; vsync for 0011M - just reset timer
VsyInt:	mov	#20, @#177712
	rti


; keyboard simple
Kbd274:
KbdInt:	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	@#177662, R0
	mov	R0, (PC)+
KeyCur:	.word	0
	mov	#KeyToPpu, R1
10$:	cmp	R0, (R1)+
	bne	20$
	bis	(R1), PpuKeys
	br	90$
20$:	tst	(R1)+
	cmp	R1, #KeyToPpuEnd
	bne	10$
90$:	mov	(SP)+, R1
	mov	(SP)+, R0
	rti


; remember current keys + joy for later use
RememberKeys:
	clr	(PC)+
UsedKeys:	.word	0
	; joy
	mov	@#177714, R0			; get joy bits
	bic	(PC)+, R0			; clear bad ones
JoyBadBits:	.word	0
	; if we redefined joy bits - set them 
	clr	R2
	mov	#JoyReTable, R1
02$:	bit	R0, (R1)+
	beq	04$
	bis	(R1), R2
04$:	tst	(R1)+
	cmp	R1, #JoyReTableEnd
	blo	02$
	bis	R2, UsedKeys
10$:	; keys
	bit	#100, @#177716			; any key pressed?
	beq	20$				; yes
PpuKeys =: .+2
	clr	#000000
20$:	bis	PpuKeys, UsedKeys
	return


; wait for vsync
VsyncWait:
	mov	#177710, R0
TimerLine =: .+2
	cmp	#000360, (R0)
	bne	.-4
	inc	(PC)+
FrameCount:	.word	0
	return


; clear vram
ClearScreen:
	mov	#C_VADDR, R0
	clr	R1
10$:	mov	R1, (R0)+
	mov	R1, (R0)+
	tst	R0
	bpl	10$
	return

; set screen scroll pos to ScrollY
SetScroll:
	mov	ScrollY, R0
	add	#1330, R0
	mov	R0, @#177664
	return


; //////////////////////////////////////////////////////////////////////////////
; // GAEMPLAY
; //////////////////////////////////////////////////////////////////////////////

; game vars from live lost / new game
PrepareVars:
	; clear all blocks
	mov     #Block0, R0
        mov     #4.*9., R1		; 9x8 bytes
        clr     (R0)+
        sob     R1, .-2
	; scrolls
	clr	ScrollY
	clr	BlockY
	mov	#-1, BloCnt			; block counter (just before bridge)
	mov	#14., NoMine			; blocks cnt to 100% make mine
	; no island just in case (will be bridge anyway)
	clr	wBlStart2
	clr	wBlEnd2
	; plane & missile
	mov	#120.*400, PlaneX
	clr	PlaneStatus
	call	PlaneVelReset
	clr	MissileX
	clr	MissileSaddr			; do not xor it in first place
	return


; game rotation (0, 1 or 2 lines depends on what we are doing)
Rotate:	mov	#FirstLinesBuf, (PC)+
FirstLineAddr:	.word	0
	cmp	CurrentMode, #C_MODE_GAME	; speed up/down can be used only inside main game cycle
	bne	RotateOne
	; check up/down keys (priority to down)
	bit	#P_KEY_DOWN, UsedKeys
	beq	10$
	bit	#1, FrameCount
	beq	RotateOne
	return
10$:	bit	#P_KEY_UP, UsedKeys
	beq	RotateOne
	call	RotateOne

; rotate one line
RotateOne:
	decb	ScrollY				; decrease scrollline (byte!)
	dec	BlockY				; decrease blockline
	bge	PrepFirstLine
	mov	#31., BlockY			; last block line
	inc	BloCnt
	bic	#^B1111111111110000, BloCnt
	bne	10$
	; new level
	mov	RandLO, RandBridge		; store random when bridge is spawning
	inc	Level
	; can't go higher than level 48, or else 'difficulty' will spawn mostly mines and houses
	cmp	Level, #49.
	blo	10$
	mov	#47., Level
10$:	; we are flying at a bridge
	cmp	BloCnt, #8.
	bne	20$
	mov	Level, SLevel			; store level #
	mov	RandBridge, RandStore		; store bridge random
20$:	call	MakeBlock

; prepare first line
PrepFirstLine:
	; draw normal banks and river
	mov	#^B1010101010101010, R4		; color = green
	mov	FirstLineAddr, R5
	; draw road if in block 0
	tst	BloCnt
	bne	10$
	mov	BlockY, R4
	asl	R4
	mov	RoadCo(R4), R1
	mov	BridgeCo(R4), R2
	; draw road 
	mov	#6., R3
	mov	R1, (R5)+
	mov	R1, (R5)+
	sob	R3, .-4
	; draw bridge or just water
	cmp	CurrentMode, #C_MODE_PREPARE
	bhi	02$
	mov	#^B0101010101010101, R2
02$:	mov	R2, (R5)+
	mov	R2, (R5)+
	mov	R2, (R5)+
	mov	R2, (R5)+
	br	20$
10$:	; draw left bank (R4 - road color if needed)
	movb	bBlEnd1, R3
	mov	R3, R2	
	mov	R4, (R5)+
        sob	R3, .-2
	; draw water
	mov	#16., R3			; 16. - left bank - island = water width
	sub	R2, R3				; we haven't subb :(
	movb	bBlEnd2, R1
	sub	R1, R3
	mov	#^B0101010101010101, R4
	mov	R4, (R5)+
	sob	R3, .-2
	; draw island half
	tst	R1
	beq	20$
	mov	#^B1010101010101010, R4
	mov	R4, (R5)+
	sob	R1, .-2
20$:	; need to mirror landscape
	mov	R5, R4
	mov	#16., R3
	mov	-(R4), (R5)+
	sob	R3, .-2
	; draw house line
	cmpb	Block0, #03.			; if it's a house in block 0
	bne	40$
	call	HouseLine
40$:	cmpb	Block0, #04.			; if it's a mine in block 0
	bne	50$
	call	MineLine
50$:	; move blocks end to start
	add	wBlDiff1, wBlEnd1
	add	wBlDiff2, wBlEnd2
	; advance first line addr
	add	#C_SCRWID, FirstLineAddr
	return

; prepare house line
HouseLine:
	mov	BlockY, R1
	cmp	R1, #25.			; house lines are 06.-25. inside block
	bhi	99$
	cmp	R1, #06.
	blo	99$
	sub	#06., R1			; R1 = line inside house
	mov	FirstLineAddr, R5
	mov	Block0+2, R0
	asl	R0
	add	R0, R5				; R5 = vaddr + house X
	movb	Block0+1, R0			; R0 = direction
	; drawing
	asl	R0
	mov	WSPRI3(R0), R0			; R0 = sprite addr
	asl	R1				; R1 = line num * 8 (4-words)
	asl	R1
	asl	R1
	add	R1, R0				; R0 = line addr inside house sprite
	mov	(R0)+, (R5)+
	mov	(R0)+, (R5)+
	mov	(R0)+, (R5)+
	mov	(R0)+, (R5)+
99$:	return

; prepare mine line
MineLine:
	mov	BlockY, R1
	cmp	R1, #20.			; mine lines are 12.-20. inside block
	bhi	99$
	cmp	R1, #12.
	blo	99$
	sub	#12., R1			; sprite line -> R1
	mov	FirstLineAddr, R5
	mov	Block0+2, R0			; X coord
	asr	R0
	asr	R0
	asr	R0
	asl	R0
	add	R0, R5				; vaddr+X -> R5
	mov	#WCP40, R0
	asl	R1
	asl	R1				; sprite line * 3 (2-words)
	add	R1, R0
	mov	(R0)+, (R5)+
	mov	(R0)+, (R5)+
99$:	return


; //////////////////////////////////////////////////////////////////////////////
; // Draw
; //////////////////////////////////////////////////////////////////////////////

; draw first line of screen and objects
DrawFirstLines:
	; first lines buf addr
	mov	FirstLineAddr, R0
	cmp	R0, #FirstLinesBuf
	blos	99$				; nothing to draw
	; vaddr
	mov	ScrollY, R1
	swab	R1
	ror	R1
	ror	R1
	add	#C_VADDR, R1
	; draw them
10$:	sub	#C_SCRWID, R0
	mov	#C_SCRWID/8., R3
20$:	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)+
	sob	R3, 20$
	tst	R1
	bpl	30$
	sub	#40000, R1
30$:	sub	#C_SCRWID, R0
	cmp	R0, #FirstLinesBuf
	bhi	10$				; nothing to draw
99$:	return
	

; draw all objects
DrawObjects:
	mov	#Block0, 10$+2
	mov	#9., 20$+2
10$:	mov	#000000, R0			; R0 = Block addr
	movb	(R0), R1			; R1 = object ID
	asl	R1
	call	@DrawOL(R1)
	add	#8., 10$+2
20$:	dec	#000000
	bne	10$
	return

; draw object proc table
DrawOL:	.word	RetAdr, DrawExplo, RetAdr, RetAdr, RetAdr, DrawShip, DrawHeli, DrawBoat, RetAdr

; draw object explosion proc table
DexpOL:	.word	RetAdr, RetAdr, RetAdr, RetAdr, DrawMineExp, DrawShipExp, DrawHeliExp, DrawBoatExp, DrawBridgeExp

; (01) draw explosion
; R0 - block addr
DrawExplo:
	; draw only on even animation #
	movb	6(R0), R5
	bit	#1, R5
	bne	99$
	asr	R5				; animation # / 2
	movb	1(R0), R1
	asl	R1
	jmp	@DexpOL(R1)
99$:	return


; explosion animation number (/2)
;			0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16
ExpAniNum:	.byte	0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 4
		.even
ExpAniMine:	.word	WCP41, WCP42, WCPBLU
ExpAniHeli:	.word	WSPL10, WSPL11, 0
ExpAniShip:	.word	WSPL12, WSPL13, 0
ExpAniPlane:	.word	WSPT05, WSPT06, 0

; (04) draw mine explosion
; R0 - block addr
; R5 - explosion animation # / 2
DrawMineExp:
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	movb	ExpAniNum(R5), R5
	mov	ExpAniMine(R5), R4
	; get vaddr
	mov	R2, R5
	incb	R5				; (!) NEED THIS
	swab	R5
	ror	R5
	ror	R5
	add	#C_VADDR, R5
	asr	R1
	asr	R1
	asr	R1
	asl	R1				; +X
	add	R1, R5				; vaddr -> R5
	; draw 2 words x 16 lines
	mov	#9., R3
	; check if block-0
	cmp	R0, #Block0
	bhi	10$
	; block-0 must check for need to draw
2$:	cmp	R2, ScrollY			; need to draw?
	blt	3$
	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)
	add	#C_SCRWID-2, R5
	inc	R2
	sob	R3, 2$
	return
3$:	add	#4., R4				; next line
	add	#C_SCRWID, R5
	inc	R2
	sob	R3, 2$
	return
10$:	; check if not last block
	cmp	R0, #Block8
	bhis	20$
	; blocks 1..7 are drawing fully
12$:	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)
	add	#C_SCRWID-2, R5
	sob	R3, 12$
	return
20$:	; last block are not drawing fully sometimes
	mov	ScrollY, R0
	dec	R0
30$:	cmp	R2, R0
	bge	90$
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-2, R5
	inc	R2
	sob	R3, 30$
90$:	return


; (05) draw ship
; R0 - block addr
DrawShip:
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	; spr table addr
	mov	#WSP50L, R4
	tstb	1(R0)
	beq	10$
	mov	#WSP51L, R4
10$:
; R1 - X coord
; R2 - Y line
; R4 - spr table addr
	; use preshift
	mov	R1, R5
	bic	#^B1111111111111000, R5		; X fine
	asl	R5				; X fine * 2	
DrawShipUniv0:
	add	R5, R4
	mov	(R4), R4
; R4 - sprite addr
DrawShipUniv1:
	; vaddr
	mov	R2, R5
	swab	R5
	ror	R5
	ror	R5
	add	#C_VADDR, R5
	asr	R1
	asr	R1
	asr	R1				; X coarse
	asl	R1				; X coarse * 2
	add	R1, R5				; add X/8 to vaddr
	; draw 5 words x 8 lines
	mov	#8., R3
	; check if block-0
	cmp	R0, #Block0
	bhi	10$
	; block-0 must check for need to draw
2$:	cmp	R2, ScrollY			; need to draw?
	blt	3$
	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-8., R5
	inc	R2
	sob	R3, 2$
	return
3$:	add	#10., R4			; next line
	add	#C_SCRWID, R5
	inc	R2
	sob	R3, 2$
	return
10$:	; check if not last block
	cmp	R0, #Block8
	bhis	20$
	; blocks 1..7 are drawing fully
12$:	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-8., R5
	sob	R3, 12$
	return
20$:	; last block are not drawing fully sometimes
	mov	ScrollY, R0
	dec	R0
30$:	cmp	R2, R0
	bge	90$
	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-8., R5
	inc	R2
	sob	R3, 30$
90$:	return


; (05) draw ship explosion
; R0 - block addr
; R5 - explosion animation # / 2
DrawShipExp:
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	; get spr addr
	movb	ExpAniNum(R5), R5		; .. to word
	mov	ExpAniShip(R5), R4		; .. to table addr
	beq	10$
	mov	R1, R5
	bic	#^B1111111111111001, R5		; X fine / 2 * 2
	br	DrawShipUniv0
10$:	mov	#WCPBLU, R4			; just sprite
	br	DrawShipUniv1


; (06) draw helicopter
; R0 - block addr
DrawHeli:
	mov	#10., HeliHeight		; usual helicopter (10. height)
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	; spr addr
	clr	R4
	bisb	6(R0), R4			; animation
	asl	R4
	bisb	1(R0), R4			; direction
	asl	R4
	mov	WSP60A(R4), R4			; get sprites tab adr -> R4
; R1 - X coord
; R2 - Y line
; R4 - spr table addr
DrawHeliUniv0:
	; use preshift
	mov	R1, R5
	bic	#^B1111111111111000, R5		; X fine
	asl	R5				; X fine * 2
DrawHeliUniv01:
	add	R5, R4
	mov	(R4), R4			; sprite adr with preshift -> R4
; without preshift
; R4 - sprite addr
DrawHeliUniv1:
	; vaddr
	mov	R2, R5
	swab	R5
	ror	R5
	ror	R5
	add	#C_VADDR, R5
	asr	R1
	asr	R1
	asr	R1				; X coarse
	asl	R1				; X coarse * 2
	add	R1, R5				; add X/8 to vaddr
	; draw 3 words x 10 lines
HeliHeight =: .+2
	mov	#10., R3
	; check if block-0
	cmp	R0, #Block0
	bhi	10$
	; block-0 must check for need to draw
2$:	cmp	R2, ScrollY			; need to draw?
	blt	3$
	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-4, R5
	inc	R2
	sob	R3, 2$
	return
3$:	add	#6., R4				; next line
	add	#C_SCRWID, R5
	inc	R2
	sob	R3, 2$
	return
10$:	; check if not last block
	cmp	R0, #Block8
	bhis	20$
	; blocks 1..7 are drawing fully
12$:	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-4, R5
	sob	R3, 12$
	return
20$:	; last block are not drawing fully sometimes
	mov	ScrollY, R0
	dec	R0
30$:	cmp	R2, R0
	bge	90$
	mov	(R4)+, (R5)+			; draw line
	mov	(R4)+, (R5)+
	mov	(R4)+, (R5)
	add	#C_SCRWID-4, R5
	inc	R2
	sob	R3, 20$
90$:	return


; (06) draw helicopter explosion
; R0 - block addr
; R5 - explosion animation # / 2
DrawHeliExp:
	mov	#10., HeliHeight
DrawHeliExp1:
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	; get spr addr
	movb	ExpAniNum(R5), R5		; .. to word
	mov	ExpAniHeli(R5), R4		; .. to table addr
	beq	10$
	mov	R1, R5
	bic	#^B1111111111111001, R5		; X / 2 * 2 fine
	br	DrawHeliUniv01
10$:	mov	#WCPBLU, R4			; just sprite
	br	DrawHeliUniv1


; (07) draw boat
; R0 - block addr
DrawBoat:
	mov	#6., HeliHeight			; boat height (will use helicopter draw routine)
	mov	2(R0), R1			; X coord
	clr	R2
	bisb	4(R0), R2			; Y line
	; spr table addr
	mov	#WSP70L, R4
	tstb	1(R0)
	beq	10$
	mov	#WSP71L, R4
10$:	br	DrawHeliUniv0


; (07) draw boat explosion
; R0 - block addr
; R5 - explosion animation # / 2
DrawBoatExp:
	mov	#6., HeliHeight
	br	DrawHeliExp1


; draw player's plane
DrawPlane:
	; get plane's vaddr
	mov	ScrollY, R2
	add	#C_PLANE_Y, R2
	swab	R2
	clrb	R2
	ror	R2
	ror	R2
	add	#C_VADDR, R2
	mov	PlaneX, R0			; plane X is float [int|frac]
	clrb	R0
	swab	R0
	mov	R0, R1
	asr	R1
	asr	R1
	asr	R1
	asl	R1
	add	R1, R2
	bpl	10$
	sub	#40000, R2
10$:	mov	R2, PlaneVaddr			; store vaddr for later use
	; if plane is blowing
	mov	PlaneStatus, R5	
	beq	16$
	cmp	R5, #30.			; explosion # exceeding limit?
	bhi	99$				; yes - exit, not drawing
	asr	R5				; /2 - explosions are 0..16
	movb	ExpAniNum(R5), R5
	mov	ExpAniPlane(R5), R5
	bic	#^B1111111111111001, R0
	add	R5, R0
	mov	(R0), R0
	br	18$
	; 
16$:	bic	#^B1111111111111000, R0		; get sprite addr
	asl	R0
PlaneTable =: .+2
	mov	WSPT00(R0), R0
18$:	mov	R0, PlaneSaddr			; store sprite addr
	br	XorPlane1
; remove previous plane
XorPlane =: .
	mov	(PC)+, R0
PlaneSaddr =: .
	.word	0
	beq	99$				; we don't have previous plane
	mov	(PC)+, R2
PlaneVaddr =: .
	.word	0
	clr	PlaneSaddr			; clear previous plane presence flag
; R0 - sprite addr (3 words line)
; R2 - vaddr
XorPlane1 =: .
	mov	#C_SCRWID-6, R5
	mov	#13., R3
20$:	mov	(R0)+, R1
	xor	R1, (R2)+
	mov	(R0)+, R1
	xor	R1, (R2)+
	mov	(R0)+, R1
	xor	R1, (R2)+
	add	R5, R2
	bpl	30$
	sub	#40000, R2
30$:	sob	R3, 20$
99$:	return


; missile sprites with preshift (16-pix 1-line)
MisSprXor:	.word	^B0000000000001111, ^B0000000000000000
		.word	^B0000000000111100, ^B0000000000000000
		.word	^B0000000011110000, ^B0000000000000000
		.word	^B0000001111000000, ^B0000000000000000
		.word	^B0000111100000000, ^B0000000000000000
		.word	^B0011110000000000, ^B0000000000000000
		.word	^B1111000000000000, ^B0000000000000000
		.word	^B1100000000000000, ^B0000000000000011
MisSprBis:	.word	^B0000000000000101, ^B0000000000000000
		.word	^B0000000000010100, ^B0000000000000000
		.word	^B0000000001010000, ^B0000000000000000
		.word	^B0000000101000000, ^B0000000000000000
		.word	^B0000010100000000, ^B0000000000000000
		.word	^B0001010000000000, ^B0000000000000000
		.word	^B0101000000000000, ^B0000000000000000
		.word	^B0100000000000000, ^B0000000000000001
MisSprGrn:	.word	^B0000000000001010, ^B0000000000000000
		.word	^B0000000000101000, ^B0000000000000000
		.word	^B0000000010100000, ^B0000000000000000
		.word	^B0000001010000000, ^B0000000000000000
		.word	^B0000101000000000, ^B0000000000000000
		.word	^B0010100000000000, ^B0000000000000000
		.word	^B1010000000000000, ^B0000000000000000
		.word	^B1000000000000000, ^B0000000000000010

; draw missile
DrawMissile:
	mov	MissileX, R0			; do we have a missile at all?
	beq	99$				; nope
	mov	ScrollY, R2
	add	MissileY, R2
	swab	R2
	clrb	R2
	ror	R2
	ror	R2
	add	#C_VADDR, R2
	mov	R0, R1				; R1 <- missile X
	asr	R1
	asr	R1
	asr	R1
	asl	R1				; get bytes count
	add	R1, R2
	bpl	20$
	sub	#40000, R2
20$:	mov	R2, MissileVaddr		; store vaddr for later use
	bic	#^B1111111111111000, R0		; get sprite addr
	asl	R0				; missile sprite is 2 words
	asl	R0				; so it's *4 bytes
	add	#MisSprXor, R0
	mov	R0, MissileSaddr
; xor it with red, missile usually always on blue water
; R0 - xor sprite addr (2 words line)
; R2 - vaddr
XorMissile =: .
	mov	#C_SCRWID-4, R5
	mov	#C_MIS_DY, R3
	mov	(R0)+, R1			; first word of missile sprite
	mov	(R0), R0			; secont word
30$:	xor	R1, (R2)+			; xor them
	xor	R0, (R2)+
	add	R5, R2
	bpl	40$
	sub	#40000, R2
40$:	sob	R3, 30$
99$:	return

; remove missile
; we can't use xor now - use usual bic bis
RemoveMissile:
	mov	(PC)+, R5
MissileSaddr =: .
	.word	0
	beq	99$				; we don't have previous missile
	mov	(PC)+, R2
MissileVaddr =: .
	.word	0
	clr	MissileSaddr			; clear previous missile flag
; R5 - xor sprite addr (2 words line)
; R2 - vaddr
	mov	(R5)+, R0			; words for bic
	mov	(R5)+, R1
	add	#28., R5
	mov	(R5)+, R3			; words for bis
	mov	(R5)+, R4
	mov	#C_SCRWID-4, R5
	mov	#C_MIS_DY, 40$+2
30$:	bic	R0, (R2)
	bis	R3, (R2)+
	bic	R1, (R2)
	bis	R4, (R2)+
	add	R5, R2
	bpl	40$
	sub	#40000, R2
40$:	dec	#000000
	bne	30$
99$:	return


; draw bridge explosion
; R0 - block #
; R5 - explosion animation # / 2
DrawBridgeExp:
	; at #0 and #16. animations - draw blue water
	tstb	R5
	beq	100$
	cmpb	R5, #16.
	beq	100$
	; else draw 2 ship explosions
	mov	#12.*8.+4, R1			; X
	clr	R2
	bisb	4(R0), R2			; Y line
	inc	R2
	inc	R2				; adjust Y + 2
	movb	ExpAniNum(R5), R5		; .. to word
	mov	ExpAniShip(R5), R4		; .. to table addr
	mov	R1, R5
	bic	#^B1111111111111001, R5		; X fine / 2 * 2
	add	R5, R4
	mov	(R4), R4			; R4 - sprite addr
	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R4, -(SP)
	call	DrawShipUniv1
	mov	(SP)+, R4
	mov	(SP)+, R2
	mov	(SP)+, R1
	mov	(SP)+, R0
	add	#12., R2
	add	#24., R1
	jmp	DrawShipUniv1
	; return
100$:	; draw blue water 
	mov	#^B0101010101010101, R4
	clr	R5
	bisb	4(R0), R5			; Y-line of vaddr
	swab	R5
	ror	R5
	ror	R5
	add	#C_VADDR, R5
	add	#24., R5			; R5 - vaddr
	mov	#24., R3			; R3 <- DY = 24
	; check if block-8
	cmp	R0, #Block8
	bhis	130$
	; if block-0
	cmp	R0, #Block0
	beq	120$
	; blocks 1..7
110$:	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)
	add	#C_SCRWID-14., R5
	sob	R3, 110$
	return
	; block 0
120$:	cmp	R2, ScrollY			; need to draw?
	blt	124$
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)
	add	#C_SCRWID-14., R5
	inc	R2
	sob	R3, 120$
	return
124$:	add	#C_SCRWID, R5
	inc	R2
	sob	R3, 120$
	return
130$:	; block 8
	mov	ScrollY, R0
	dec	R0
134$:	cmp	R2, R0
	bge	190$
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)+
	mov	R4, (R5)
	add	#C_SCRWID-14., R5
	inc	R2
	sob	R3, 134$
190$:	return	


; //////////////////////////////////////////////////////////////////////////////
; // Making blocks
; //////////////////////////////////////////////////////////////////////////////

	; a bit more ships
MakEnL:	.word	MakeShip, MakeHeli, MakeBoat, MakeShip, MakeHeli, MakeBoat, MakeShip, MakeShip

; make new block
MakeBlock:
	; move 8 blocks down
	mov     #Block8, R4			; R4-src, R5-dst
	mov	#Block9, R5
	mov     #2.*8., R3			; (!) words / 2
20$:	mov	-(R4), -(R5)
	mov	-(R4), -(R5)
	sob	R3, 20$	
	; only ONE random for each block
	call	Random	
	; make a new block
	tst	BloCnt				; is it a brodge?
	bne	30$
	; bridge block - new level
	mov	#12.*400+200, wBlStart1		; bridge have fixed start/end bank dx
	mov	#12.*400+200, wBlEnd1
	movb	RandLo, R0			; store next block random bank size
	bic	#^B1111111111110000, R0		; R0 = 0..15
	movb	BanksRandom(R0), bBlNext	; make random by table 1..13
	movb	#200, wBlNext			; 0.5 float part
	clr	wBlDiff1			; no diffs at bridge
	clr	wBlDiff2
	; bridge object
	mov	#Block0, R5
	movb	#08., (R5)+			; 08. - bridge
	clrb	(R5)+				; direction (doesn't matter)
	mov	#12.*8., (R5)+			; bridge X
	mov	ScrollY, R0
	sub	#27., R0
	movb	R0, (R5)+			; bridge Y (line number)
	clrb	(R5)+				; moving = 0
	clrb	(R5)+				; animation counter
	clrb	(R5)				; reserved = 0
	return					; object is created
30$:	; block before bridge
	cmp	BloCnt, #15.
	bne	40$
	mov	wBlStart1, wBlEnd1		; create end from start of previous
	mov	#12.*400+200, wBlStart1		; fixed start (next will be bridge)
	clr	wBlStart2			; no island
	clr	wBlEnd2
	br	MakeObject			; make diff and object
40$:	; straight section
	bit	#1, Level
	beq	50$
	mov	#4.*400+200, wBlStart1
	br	MakeObject
50$:	; normal block
	mov	wBlStart1, wBlEnd1		; connect river bank
	mov	wBlStart2, wBlEnd2		; connect island
	movb	#200, wBlEnd1
	movb	#200, wBlEnd2
	; do we need to change river bank?
	bit	#1, BloCnt
	beq	60$
	mov	wBlNext, wBlStart1		; change to next random width	
	movb	RandLo, R0
	bic	#^B1111111111110000, R0
	movb	BanksRandom(R0), bBlNext	; make next width by table 1..13
	movb	#200, wBlNext			; 0.5 float part
60$:	; island sizes
	; block before before bridge - end island
	cmp	BloCnt, #14.
	bne	70$
	clr	wBlStart2
	br	MakeObject
70$:	; block 1 - no island at all
	cmp	BloCnt, #1
	beq	MakeObject
	; 'normal' blocks island
	; finish island if next block width is not enough
	cmpb	bBlNext, #10
	blo	72$
	clr	wBlStart2
	br	MakeObject
72$:	; test current width
	movb	bBlStart1, R1
	movb	bBlEnd1, R2
	call	GetMax
	cmp	R0, #8.
	bhi	MakeObject	
	mov	#8.*400+200, wBlStart2
	sub	wBlStart1, wBlStart2
	cmp	wBlStart2, #4.*400+200		; test for too wide island
	blos	MakeObject
	mov	#4.*400+200, wBlStart2

; try to make object after all
MakeObject:
	; first make river banks diffs
	mov	wBlStart1, R0
	sub	wBlEnd1, R0
	asr	R0
	asr	R0
	asr	R0
	asr	R0
	asr	R0				; / 32.
	mov	R0, wBlDiff1
	mov	wBlStart2, R0
	sub	wBlEnd2, R0
	asr	R0
	asr	R0
	asr	R0
	asr	R0
	asr	R0				; / 32.
	mov	R0, wBlDiff2
	; now making object
	clr	Block0				; clear obj ID
	; first block is always a house
	cmp	BloCnt, #1
	beq	MakeHouse
	; we can't run for too long without mine
	dec	NoMine
	ble	MakeMine
	; use level difficulty
	mov	#64., R0
	sub	Level, R0			; R0 = 0..64 max, 0..16 min
	asl	R0				; R0 = 0..128 max, 0..32 min
	cmpb	RandHi, R0
	bhi	10$				; make enemy
	; check both bit 6 to make mine
	bitb	#^B01000000, RandLo
	beq	MakeHouse
	bit	#^B01000000, R0
	beq	MakeHouse
	; make mine after all
	br	MakeMine
10$:	; making enemy
	movb	RandHi, R0
	bic	#^B1111111111111000, R0
	cmp	Level, #4.			; no boats until level 4
	bhis	20$
	bic	#^B1111111111111110, R0
20$:	asl	R0
	jmp	@MakEnL(R0)

; making house
MakeHouse:
	mov	#Block0, R5
	movb	#03., (R5)+			; 03. - house ID
	movb	RANDLO, R0
	bic	#^B1111111111111110, R0
	movb	R0, (R5)+			; +01 - direction
	; get X coord
	; can we use island?
	movb	bBlStart2, R1
	movb	bBlEnd2, R2
	call	GetMin
	cmp	R0, #2				; must be 4*8 pix wide island
	blo	20$
	bitb	#4, RANDHI			; ~50% chance to put house in center
	bne	20$
	mov	#14., (R5)+			; house X in center
	br	80$
20$:	; use side placement
	movb	bBlStart1, R1
	movb	bBlEnd1, R2
	call	GetMin
	; don't place house at all
	cmp	R0, #4				; small side place?
	bhis	22$
	clrb	-2(R5)				; clear object
	return
22$:	; R0 - width of bank in 8-pix
	asr	R0
	sub	#2, R0
	bge	30$
	clr	R0				; R0 - house X
30$:	; maybe use other side?
	bitb	#8., RandHi
	bne	40$
	mov	#28., R1
	sub	R0, R1
	mov	R1, R0
40$:	mov	R0, (R5)+			; house X on left side
80$:	clrb	(R5)+				; house Y (line number, not used)
	clrb	(R5)+				; moving = 0
	clrb	(R5)+				; animation counter
	clrb	(R5)				; reserved = 0	
	return

; make mine
MakeMine:
	mov	#14., NoMine			; reset 'no mine' length
	mov	#2., R5				; mine width in 8-pix
	call	InWaterCoord			; X*8 -> R0
	tst	R0				; can't place?
	bne	10$
	clr	Block0
	return
10$:	mov	#Block0, R5
	movb	#04., (R5)+			; 04. - mine
	clrb	(R5)+				; direction
	asl	R0
	asl	R0
	asl	R0				; make X coord in pixels
	mov	R0, (R5)+			; X coord
	mov	ScrollY, R0
	sub	#20., R0
	movb	R0, (R5)+			; y line number
	clrb	(R5)+				; moving = 0
	clrb	(R5)+				; animation counter
	clrb	(R5)				; reserved = 0	
	return

; descriptions: ID, 16.+(dy/2)
ShipDescr:	.byte	05, 20.
HeliDescr:	.byte	06, 21.
BoatDescr:	.byte	07, 19.

; making ship
MakeShip:	
	mov	#5., R5				; ship width = 5 (8-pix)
	call	InWaterCoord			; X*8 -> R0
	mov	#ShipDescr, R4
; R0 - in water coords
; R4 - obj descriptions table
MakeShipUni:
	tst	R0
	bne	10$
	clr	Block0
	return
10$:	mov	#Block0, R5
	movb	(R4)+, (R5)+			; 05. - ship
	clrb	(R5)				; direction = 0
	bitb	#^B01000000, RandHi
	beq	.+4
	incb	(R5)				; direction = 1
	inc	R5
	asl	R0				; X*8
	asl	R0
	asl	R0
	mov	R0, (R5)+			; X coord
	mov	ScrollY, R0
	movb	(R4)+, R1
	sub	R1, R0				; = 16+(dy/2)
	movb	R0, (R5)+			; y line number
	movb	RandLo, R0
	bic	#^B1111111111100000, R0		; 0..31
	add	#40., R0			; some tuning to delay
	movb	R0, (R5)+			; moving delay
	clrb	(R5)+				; animation counter
	clrb	(R5)				; reserved 
	return

; making helicopter
MakeHeli:
	mov	#3., R5				; helicopter width = 3 (8-pix)
	call	InWaterCoord			; X*8 -> R0
	mov	#HeliDescr, R4
	br	MakeShipUni

; making boat
MakeBoat:
	mov	#3., R5				; boat width = 3 (8-pix)	
	clr	Block0
	call	InWaterCoord			; X*8 -> R0
	mov	#BoatDescr, R4
	br	MakeShipUni


; get 'in-water' X coord -> R0
; R5 - object size in 8-pix (words)
InWaterCoord:
	; blocks 1 or 15. will use simplified random
	mov	BloCnt, R0
	cmp	R0, #15.			; block-15?
	beq	4$
	cmp	R0, #1.				; block-1?
	beq	4$
	bit	#1, Level			; straight?
	beq	8$
	; straight blocks - random by table 
	movb	RandLO, R0
	bic	#^B1111111111110000, R0
	movb	RNDT1L(R0), R0
	return	
4$:	; 1 or 15 block
	movb	RandLo, R0			; 0..255.
	bic	#^B1111111111111001, R0
	asr	R0				; 0..3
	add	#12., R0
	return
8$:	; normal section - get water width
	movb	bBlStart2, R1
	movb	bBlEnd2, R2
	call	GetMax
	mov	#16., R4
	sub	R0, R4
	movb	bBlStart1, R1
	movb	bBlEnd1, R2
	call	GetMax
	cmp	R0, #2.
	bhis	20$
	mov	#2., R0
20$:						; water start -> R0
	sub	R0, R4				; water width -> R4
	; ship size = 5 (8-pix)
	; heli size = 3
	; mine size = 2
	cmp	R4, R5				; can we place at all?
	bhis	30$
	; unable to place object
	clr	R0
	br	99$
30$:	sub	R5, R4				; placeable max rel x -> R4 (0..14 best case)
	asl	R4
	mov	RNDT0L(R4), R2			; table addr -> R2
	; random
	movb	RANDHI, R1
	bic	#^B1111111111111000, R1	; 0..7
	; random from table
	add	R1, R2
	movb	(R2), R1			; table random (0..14 best case)
	add	R1, R0
	; need to mirror placement?
	bit	#^B00100000, RANDHI
	bne	99$
	mov	#32., R1
	sub	R0, R1
	sub	R5, R1
	mov	R1, R0
99$:	return


; //////////////////////////////////////////////////////////////////////////////
; // Process objects
; //////////////////////////////////////////////////////////////////////////////

PROCOL:	.word	RetAdr, ProcExplo, RetAdr, RetAdr, RetAdr, ProcShip, ProcHeli, ProcBoat, RetAdr

PRO000:	.word	0
PRO003:	.word	0

; process block objects
ProcObjects:
	mov	#Block0, 10$+2
	mov	#9., 20$+2			; total blocks count on screen
10$:	mov	#000000, R0
	movb	(R0), R1
	asl	R1
	call	@ProcOL(R1)			; process movement and animation
	add	#8., 10$+2
20$:	dec	#000000
	bne	10$
	return

; explosion debug
;ProcMine:
;	cmp	R0, #Block6
;	bne	99$
;	movb	(R0), R1
;	movb	#1, (R0)
;	movb	R1, 1(R0)
;	clrb	6(R0)
;99$:	return


; (01) explosion processing
; R0 - block addr
ProcExplo:
	incb	6(R0)
	cmpb	6(R0), #32.			; max animation for explosion
	blos	99$
	clrb	(R0)				; delete object
99$:	return


; (05) ship processing
; R0 - block addr
ProcShip:	
	; usual ship (long)
	mov	#10., ShipWidth			; ship width in bytes
	mov	#1, R5				; ship speed (in pix)
; entry for a boat (sort of a same thing)
; R5 - speed
ProcShipUni:
	; are we moving already?
	tstb	5(R0)
	beq	10$
	decb	5(R0)	
	return
10$:	; get next moving coord
	tstb	1(R0)				; is it right direction?
	bne	50$
	; do we need to check? (next fine coord = 0 - check)
	mov	2(R0), R1			; X
	add	R5, R1
	bit	#^B111, R1			; next X-fine is 0?
	bne	20$				; no, move right
	; else check
ShipWidth =: .+2
	mov	#10., R4 			; +5 words
	call	CheckGreen
	bcc	20$				; can move
	incb	1(R0) 				; reverse direction to left
	return
20$:	add	R5, 2(R0)			; X = X + speed
	return
50$:	; moving left - do we need to check? (current fine coord =0 - check)
	mov	2(R0), R1
	bit	#^B111, R1			; current X-fine is 0?
	bne	60$				; no, move left	
	; else check left
	mov	#-2, R4				; -1 word
	call	CheckGreen			; check green
	bcc	60$
	clrb	1(R0)				; reverse direction to the right
	return
60$:	sub	R5, 2(R0)			; X = X - speed
	return


; (06) helicopter processing
; R0 - block addr
ProcHeli:
	; are we moving already?
	tstb	5(R0)
	beq	10$
	decb	5(R0)	
	br	90$
10$:	; get next moving coord
	tstb	1(R0)				; test direction
	bne	50$
	; do we need to check? (7th fine coord - check)
	mov	2(R0), R1			; X
	inc	R1
	bit	#^B111, R1			; next X-fine is 0?
	bne	20$				; no, move right
	; else check
	mov	#6., R4 			; +3 words
	call	CheckGreen			; check green
	bcc	20$				; can move
	incb	1(R0) 				; reverse direction to left
	br	90$
20$:	inc	2(R0)				; inc X
	br	90$
50$:	; moving left - do we need to check? (0th fine coord - check)
	mov	2(R0), R1
	bit	#^B111, R1			; current X-fine is 0?
	bne	60$				; no, move left	
	; else check left
	mov	#-2, R4				; -1 word
	call	CheckGreen			; check green
	bcc	60$
	clrb	1(R0)				; reverse direction to the right
	br	90$
60$:	dec	2(R0)				; dec X
90$:	; animation 1<>0
	movb	6(R0), R1
	com	R1
	bic	#^B1111111111111110, R1
	movb	R1, 6(R0)
	return


; (07) boat processing
; R0 - block addr
ProcBoat:
	; short ship (boat)
	mov	#6., ShipWidth			; boat width in bytes
	mov	#2, R5				; boat speed
	br	ProcShipUni


; check for river bank - green 8-pix color
; R4 - offset by X from vaddr
; TODO: store object's already computed vaddr instead of compute it again
CheckGreen:	
	clr	R2
	bisb	4(R0), R2			; Y line
	swab	R2
	ror	R2
	ror	R2
	add	#C_VADDR, R2
	mov	2(R0), R1			; X coord
	asr	R1
	asr	R1
	asr	R1				; X coarse
	asl	R1				; X coarse * 2
	add	R1, R2				; add X/8 words to vaddr
	add	R4, R2				; add to check right or left side
	; TODO: don't need to check so much
	mov	#8., R3
10$:	cmp	#^B1010101010101010, (R2)	; check green color
	beq	80$
	add	#C_SCRWID, R2
	sob	R3, 10$
	tst	(PC)+				; it's no green there, C=0
80$:	sec					; was green, C=1
	return


; process plane keypresses
PlaneKeys:
	; plane is crashing?
	tst	PlaneStatus			; plane is crashing - don't process keys
	bne	99$
	; key shift - fire missile
	bit	#P_KEY_FIRE, UsedKeys
	beq	20$
	tst	MissileX			; test for missile already present
	bne	20$
	; create missile
	mov	PlaneX, R0			; PlaneX is float (!) [int][frac]
	clrb	R0
	swab	R0
	add	#7., R0				; + plane half-width
	mov	R0, MissileX
	mov	#C_PLANE_Y-7., MissileY
	; firing sound
	; TODO: make sound
20$:	; right
	bit	#P_KEY_RIGHT, UsedKeys
	beq	30$
	mov	#WSPT02, PlaneTable		; plane sprites table right
	add	PlaneVel, PlaneX
	cmp	PlaneX, #255.-16.*400
	blos	PlaneVelInc
	mov	#255.-16.*400, PlaneX
	br	PlaneVelInc
30$:	; left
	bit	#P_KEY_LEFT, UsedKeys
	beq	40$
	mov	#WSPT01, PlaneTable		; plane sprites table left
	sub	PlaneVel, PlaneX
	bcc	PlaneVelInc
	clr	PlaneX
	br	PlaneVelInc
40$:	; no left or right - reset plane moving
PlaneVelReset =: .
	mov	#WSPT00, PlaneTable		; plane sprites table center
	mov	#C_PLAVEL_MIN, PlaneVel
	mov	#C_PLADVEL_MIN, PlaneDVel
	return
PlaneVelInc =: .
	add	PlaneDVel, PlaneVel
	cmp	PlaneVel, #3.*400
	blos	99$
	mov	#3.*400, PlaneVel
99$:	return


; process missile (simple flying up)
ProcMissile:
	sub	#C_MIS_VEL-1, MissileY
	cmp	MissileY, #6.
	bhi	99$
	; remove missile 
	clr	MissileX
99$:	return


; check missile collision
MissCollision:
	tst	MissileX
	beq	99$
	; where is our rocket? (in which block #)
	mov	MissileY, R4
	add	#3, R4				; correct to half-lenght?
	add	BlockY, R4
	bic	#^B1111111100000000, R4
	asr	R4
	asr	R4
	bic	#^B1111111100000111, R4		; /32. * 8. bytes block data size
	add	#Block0, R4			; I hope it's a block addr now, save it
	mov	R4, -(SP)
	call	ObjToRect
	tst	RectsBuf
	beq	90$
	; put rocket coords
	mov	MissileX, R1
	mov	R1, R2
	inc	R2
	inc	R2
	mov	MissileY, R3
	add	ScrollY, R3
	bic	#^B1111111100000000, R3
	mov	R3, R4
	add	#5., R4
	; check intersection
	call	CheckRect
	bcs	90$				; C=1 - no intersection
	; remove rocket
	clr	MissileX
	; blow object then
	mov	(SP), R0
	movb	(R0), R1
	movb	#1, (R0)+
	movb	R1, (R0)+
	clrb	4(R0)
90$:	tst	(SP)+
99$:	return


; check missile collision with ground
MissGround:
	tst	MissileX			; TODO: do we need that check of no missile?
	beq	99$				; exit then
	tst	MissileSaddr			; not drawn yet?
	beq	99$				; also exit then
	mov	MissileVaddr, R4
	sub	#C_MIS_DY-2*C_SCRWID, R4
	cmp	R4, #40000
	bhis	10$
	add	#40000, R4
10$:	; check just one line of already xor-red missile
	cmp	(R4)+, #^B1010101010101010
	beq	100$
	cmp	(R4)+, #^B1010101010101010
	beq	100$
99$:	return
100$:	; collided - remove missile
	clr	MissileX
	mov	MissileVaddr, R2
	mov	MissileSaddr, R0
	clr	MissileSaddr
	jmp	XorMissile


; check plane intersection with object
PlaneCollision:
	tst	PlaneStatus
	bne	90$
	; object in Block7
	mov	#Block7, R4
	call	ObjToRect
	tst	RectsBuf
	beq	99$				; no object or non-collidable
	; put plane's coords to registers R1 - R4
	mov	PlaneX, R0			; (!) float
	clrb	R0
	swab	R0				; to int
	; plane's X1
	inc	R0				; +1 pix to X1
	mov	R0, R1				; R1 <- X1
	; plane's X2
	add	#13., R0			; add plane DX-1
	mov	R0, R2				; R2 <- X2
	; plane's Y1
	mov	ScrollY, R0
	add	#C_PLANE_Y, R0
	bic	#^B1111111100000000, R0
	mov	R0, R3
	; plane's Y2
	add	#12., R0			; (!) can overflow 0..255
	mov	R0, R4
	; check intersection
	call	CheckRect
	bcs	99$				; C=1 - no intersection
	; blow object then
	mov	#Block7, R0
	movb	(R0), R1
	movb	#1, (R0)+
	movb	R1, (R0)+
	clrb	4(R0)
	; blow plane
90$:	tst	DebugOn
	bne	99$
	inc	PlaneStatus
	cmp	PlaneStatus, #128.
	blo	99$
	inc	CurrentMode
99$:	return


; check plane collision with ground
PlaneColGnd:
	tst	PlaneStatus			; maybe already blown up
	bne	99$
	; check for green by 4 pixels of a plane
	mov	#C_PLANE_Y, R1
	mov	PlaneX, R0
	clrb	R0
	swab	R0
	add	#7, R0
	call	CheckPixGreen
	beq	100$
	inc	R0
	call	CheckPixGreen
	beq	100$
	add	#6, R1
	sub	#5, R0
	call	CheckPixGreen
	beq	100$
	add	#11., R0
	call	CheckPixGreen
	beq	100$
99$:	return
100$:	tst	DebugOn
	bne	99$
	inc	PlaneStatus
	return


; check green at pixel's X, Y
; R0 - X, R1 - Y
; return Z=1 - have it
CheckPixGreen:
	mov	R1, R5
	add	ScrollY, R5
	swab	R5
	clrb	R5
	ror	R5
	ror	R5
	add	#C_VADDR, R5
	mov	R0, R4
	asr	R4
	asr	R4
	asr	R4
	asl	R4
	add	R4, R5
	cmp	(R5), #^B1010101010101010
	return


; put object's coords in a table
; R4 - Block addr, R5 - coords table
ObjToRect:
	mov	#RectsBuf, R5
	movb	(R4)+, R0			; R0 <- obj ID
	movb	ObjDxTable(R0), R1		; R1 <- obj DX-1
	bne	10$				; collidable object
	clr	(R5)
	return
10$:	movb	ObjDyTable(R0), R2		; R2 <- obj DY-1
	inc	R4				; skip direction
	; put obj's X1
	mov	(R4)+, R0
	mov	R0, (R5)+
	; put obj's X2
	add	R1, R0
	mov	R0, (R5)+
	; put obj's Y1
	clr	R0
	bisb	(R4), R0
	mov	R0, (R5)+
	; put obj's Y2
	add	R2, R0
	mov	R0, (R5)+
	return

ObjDxTable:	.byte	0, 0, 0, 0, 15., 31., 15., 15., 63.	; DX-1
ObjDyTable:	.byte	0, 0, 0, 0, 08., 07., 09., 05., 23.	; DY-1
RectsBuf:	.blkw	4.					; X1 X2 Y1 Y2

; check rectsbuf intersection
; R1-X1, R2-X2, R3-Y1, R4-Y2
; return C = 0 - have intersection
CheckRect:
	mov	#RectsBuf, R5
	cmp	R2, (R5)+			; X2 < obj's X1 ?
	blo	90$
	cmp	R1, (R5)+			; X1 > obj's X2 ?
	bhi	90$
	cmp	R4, (R5)+			; Y2 < obj's Y1 ?
	blo	90$
	cmp	R3, (R5)+			; Y1 > obj's Y2 ?
	bhi	90$
	; have intersection, clear C
	tst	(PC)+
90$:	sec
	return


; //////////////////////////////////////////////////////////////////////////////
; // UTILS
; //////////////////////////////////////////////////////////////////////////////

; minimal of R1,R2 -> R0
GetMin:	cmp	R2, R1
	blo	10$
	mov	R1, R0
	return
10$:	mov	R2, R0
	return

; maximal of R1,R2 -> R0
GetMax:	cmp	R2, R1
	bhi	10$
	mov	R1, R0
	return
10$:	mov	R2, R0
	return

; 16-bit LFSR (Galois)
Random:	clc
	ror	(PC)+
RandLo =: .
RandHi =: .+1
	.word	126341
	bcc	10$
	mov	#^B1011010000000000, R0		; for 2^n-1 cycle
	xor	R0, RandLo
10$:	mov	RandLo, R0
	return

RandBridge:	.word	0			; for saving random at bridge spawn
RandStore:	.word	0			; for storing bridge-spawned random


; darken vaddr by bic some pixels (used in non-selectable music menu for BK0010)
; R1 - vaddr, R2 - width
; height is 8 lines
DarkenVaddr:
	mov	#C_SCRWID*2, R0
10$:	mov	#4, R3
20$:	bicb	#^B11001100, (R1)
	bicb	#^B00110011, C_SCRWID(R1)
	add	R0, R1
	sob	R3, 20$
	sub	#8.*C_SCRWID-1, R1
	sob	R2, 10$
	return


; mask words for coloring
PriColorsTbl:	.word	^B1111111111111111, ^B1010101010101010, ^B0101010101010101, ^B0000000000000000

; unpack font byte R4 -> font word R4
UnpFont:
	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	#8., R1
	clr	R0
10$:	rorb	R4
	bcs	20$
	ror	R0
	br	30$
20$:	ror	R0
	sec
30$:	ror	R0
	sob	R1, 10$
	mov	R0, R4
	mov	(SP)+, R1
	mov	(SP)+, R0
	return

; 112276 ROM font 0010 (from space) 133436 for 11M
; second ROM for 11M -> 100000 (+2 to bank #)

; print string with addrs after call
; call PrintSp
; .word VAddr
; .word MsgAddr
PrintSp:
	mov	(SP), R0
	mov	(R0)+, PrintVaddr
	mov	(R0)+, R0
	call	Print
	add	#4, (SP)
	return

; print string
; R0 - string
; return R0 - next string addr
Print:	mov	R1, -(SP)
	mov	R2, -(SP)
	mov	R3, -(SP)
	mov	R4, -(SP)
	mov	R5, -(SP)
PrintVaddr =: .+2
	mov	#40000, R5
10$:	movb	(R0)+, R1
	beq	90$
	cmp	R1, #3.			; is it special symbol
	bhi	20$
	; change font color mask
	asl	R1
	mov	PriColorsTbl(R1), R3
	br	10$
20$:	sub	#'0, R1			; relative to '0'
	bge	30$
	mov	#16., R1		; any chars below '0' converted to #16 (here its a space)
30$:	mov	R1, R2
	asl	R1			; *7 bytes (character font size)
	asl	R1
	asl	R1
	sub	R2, R1
FontDataAddr =: .+2
	add	#FontData, R1		; R1 = font data
	mov	#7., R2
40$:	clr	R4
	bisb	(R1)+, R4
	call	UnpFont
	bic	R3, R4
	movb	R4, (R5)+
	swab	R4
	movb	R4, (R5)+
	; mov	R4, (R5)
	add	#C_SCRWID-2, R5
	sob	R2, 40$
	sub	#C_SCRWID*7.-2, R5	; advance vaddr
	br	10$
90$:	add	#10.*C_SCRWID, PrintVaddr
	mov	(SP)+, R5
	mov	(SP)+, R4
	mov	(SP)+, R3
	mov	(SP)+, R2
	mov	(SP)+, R1
	return


; 4x5 numbers (aligned by 8 bytes)
SprNumbers45:
	.byte	^B00111111, ^B00110011, ^B00110011, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00001100, ^B00001100, ^B00001100, ^B00001100, ^B00001100, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00111111, ^B00000011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00111100, ^B00110000, ^B00111111, 0, 0, 0
	.byte	^B00110011, ^B00110011, ^B00111111, ^B00110000, ^B00110000, 0, 0, 0
	.byte	^B00111111, ^B00000011, ^B00111111, ^B00110000, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00000011, ^B00111111, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110000, ^B00110000, ^B00110000, ^B00110000, 0, 0, 0
	.byte	^B00111111, ^B00110011, ^B00111111, ^B00110011, ^B00111111, 0, 0, 0
	.byte	^B00111111, ^B00110011, ^B00111111, ^B00110000, ^B00111111, 0, 0, 0 

; print octal word (4x5 font), R0 - word, R5 - vaddr
PrintOctal:
	mov	#C_SCRWID, R2
	mov	#6., R3
	; 1st bit
	clr	R1
	br	22$
20$:	; get number
	clr	R1
	asl	R0
	rol	R1
	asl	R0
	rol	R1
22$:	asl	R0
	rol	R1	
	; get spr addr
	asl	R1
	asl	R1
	asl	R1
	add	#SprNumbers45, R1
	; put bits
	movb	(R1)+, (R5)
	add	R2, R5
	movb	(R1)+, (R5)
	add	R2, R5
	movb	(R1)+, (R5)
	add	R2, R5
	movb	(R1)+, (R5)
	add	R2, R5
	movb	(R1)+, (R5)
	sub	#C_SCRWID*4-1, R5
	sob	R3, 20$
	return	 


; setup joy redefine table (if user want so, doing that only once)
JoySetup:
	call	ClearScreen
	mov	#10.*C_SCRWID+2+C_VADDR, PrintVaddr
	mov	#MsgJoy000, R0
	call	Print
	call	Print
	add	#10.*C_SCRWID, PrintVaddr
	; for double press detection
JoyTempDD =: .+2
	clr	#000000
	mov	#JoyReTable, R5
	mov	#5, R4
10$:	call	Print
	call	SetJoyKey
	sob	R4, 10$
	return

; wait for joy input (or keypress)
; R5 - where to put it
; return R5 - where to put next
SetJoyKey:
	mov	JoyTempDD, R2
	; wait for press
10$:	bit	#100, @#177716
	beq	90$
	mov	@#177714, R1
	bic	JoyBadBits, R1
	beq	10$
	; check for double press
	bis	R1, R2
	cmp	JoyTempDD, R2
	beq	10$
	; update JoyReTable
	mov	R1, (R5)+
	; wait for release
20$:	bit	#100, @#177716
	beq	90$
	mov	@#177714, R1
	bic	JoyBadBits, R1
	bne	20$
	mov	R2, JoyTempDD
	tst	(R5)+
	return
90$:	; restore defaults
	mov	#JoyReTableEnd, R5
	mov	#5, R3
	mov	-(R5), -(R5)
	sob	R3, .-2
	clr	KeyCur
	tst	(SP)+				; remove call
	return					; return from routine above


; setup vsync timer
SetupTimer:
	call	ClearScreen
	mov	#10.*C_SCRWID+C_VADDR+1, PrintVaddr
	mov	#MsgTime00, R0
	call	Print
	call	Print
	add	#6.*C_SCRWID, PrintVaddr
	call	Print
	call	Print
	; draw gauge
	mov	#128.*C_SCRWID+1+C_VADDR, R0
	mov	#31., R3
10$:	movb	#^B01000000, (R0)+
	movb	#^B00000001, (R0)+
	sob	R3, 10$
	; prepare
	call	200$
; adjust proc cycle
100$:	mov	#177710, R0
TimerLineSet =: .+2
	cmp	#000360, (R0)
	bne	.-4
	; draw/remove sprite
	call	300$
	call	400$
	; current timer
	mov	@#177710, R5
	; keys
	call	RememberKeys
	mov	#TKeysAdj, R4
	mov	#4, R3
110$:	bitb	(R4)+, UsedKeys
	beq	120$
	clr	PpuKeys
	clr	UsedKeys
	movb	(R4), R0
	add	R0, TimerLineSet
	call	200$
	br	100$
120$:	inc	R4
	sob	R3, 110$
	bit	#P_KEY_FIRE, UsedKeys
	beq	100$
	sub	#C_TIMER_ADJ, R5
	bgt	130$
	add	#740, R5
130$:	mov	R5, TimerLine
	call	ClearScreen
	return
; correct value and draw it
200$:	mov	TimerLineSet, R0
	cmp	R0, #4
	bge	210$
	mov	#4, R0
210$:	cmp	R0, #734
	ble	220$
	mov	#734, R0
220$:	mov	R0, TimerLineSet
	mov	#108.*C_SCRWID+29.+C_VADDR, R5
	call	PrintOctal
	; draw line
	mov	TimerLineSet, R0
	mov	#^B0000101010100000, R1
	asr	R0
	asr	R0
	asr	R0
	bcc	230$
	mov	#^B1010101000000000, R1
230$:	add	#118.*C_SCRWID-1+C_VADDR, R0
	mov	#8., R3
240$:	clrb	(R0)+
	clrb	(R0)+
	movb	R1, (R0)+
	swab	R1
	movb	R1, (R0)+
	swab	R1
	clrb	(R0)+
	clrb	(R0)+
	add	#C_SCRWID-6, R0
	sob	R3, 240$
	return
; draw sprite 
300$:	mov	#WSP500, R0
	mov	#200.*C_SCRWID+28.+C_VADDR, R1
	mov	#8., R2
	mov	#^B0101010101010101, R4
	call	320$
310$:	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)+
	mov	(R0)+, (R1)
	tst	(R0)+
	add	#C_SCRWID-6., R1
	sob	R2, 310$
	mov	R4, (R1)+
	mov	R4, (R1)+
	mov	R4, (R1)+
	mov	R4, (R1)
	add	#C_SCRWID-6., R1
320$:	mov	#^B0101010101010100, (R1)+
	mov	R4, (R1)+
	mov	R4, (R1)+
	mov	#^B0001010101010101, (R1)
	add	#C_SCRWID-6., R1
	return
; remove sprite
400$:	mov	#200.*C_SCRWID+28.+C_VADDR, R1
	clr	R0
	mov	#11., R2
410$:	mov	R0, (R1)+
	mov	R0, (R1)+
	mov	R0, (R1)+
	mov	R0, (R1)
	add	#C_SCRWID-6., R1
	sob	R2, 410$
	return

TKeysAdj:	.byte	P_KEY_LEFT, -4, P_KEY_RIGHT, 4, P_KEY_UP, -20, P_KEY_DOWN, 20


; just blue line
; R0 - vaddr
BlueLine:
	mov	#^B0100010001000100, R1
	mov	#18., R2
	mov	R1, (R0)+
	sob	R2, .-2
	return


; ZX0 v2.2 standart unpacker
; original ZX0 encoder/decoder (c) Einar Saukas & Urusergi
; PDP11 version by reddie, 17-sept-2025 (bugfixed)
; PDP11 version takes 94 bytes
; usage:
; R0 = source data addr (compressed)
; R1 = addr for decompressing data
; out:
; R0 = next byte after the source data
; R1 = next byte after the decompressed data
; registers used: all (R0-R5)
Unpack:	clr	R2
	movb	#200,R3
	sxt	R5
10$:	call	50$
	movb	(R0)+,(R1)+
	sob	R2,.-2
	aslb	R3
	bcs	30$
	call	50$
20$:	mov	R1,R4
	add	R5,R4
	movb	(R4)+,(R1)+
	sob	R2,.-2
	aslb	R3
	bcc	10$
30$:	bisb	#376,R2
	call	60$
	incb	R2
	bne	.+4
40$:	return
	swab	R2
	clrb	R2
	mov	R2,R5
	bisb	(R0)+,R5
	sec
	ror	R5
	mov	#1,R2
	bcs	.+6
	call	80$
	inc	R2
	br	20$
50$:	incb	R2
60$:	aslb	R3
	bne	70$
	movb	(R0)+,R3
	rolb	R3
70$:	bcs	40$
80$:	aslb	R3
	rol	R2
	br	60$


; //////////////////////////////////////////////////////////////////////////////
; // DATA 
; //////////////////////////////////////////////////////////////////////////////

CurrentMode:	.word	0

Level:		.word	0			; current level
SLevel:		.word	0

PlaneX:		.word	0			; plane sprite X (float! 0-255 in h-byte, fractional in l-byte)
PlaneY:		.word	0			; TODO: plane have different bounding box when turning
PlaneStatus:	.word	0			; plane status, 0 - normal, 1.. - exploding
PlaneVel:	.word	0			; plane velocity (float)
PlaneDVel:	.word	0			; plane velocity addition (float)

MissileX:	.word	0
MissileY:	.word	0

ScrollY:	.word   0 	   		; scroll line number
BlockY:		.word	31.			; current line number in block 0
BloCnt:		.word	0			; current block number (0..15, 0 is bridge)
NoMine:		.word	14.			; max blocks to run until create mine

wBlNext:	.byte	0			; next block upper left bank width (float part)
bBlNext:	.byte	0			; .. int part
wBlStart1:	.byte	0			; current block upper left bank width (float part)
bBlStart1:	.byte	0			; .. int part
wBlEnd1:	.byte	0			; current block lower left bank width (float part)
bBlEnd1:	.byte	0			; .. int part
wBlStart2:	.byte	0			; current block island upper width (float part)
bBlStart2:	.byte	0			; .. int part
wBlEnd2:	.byte	0			; current block island lower width (float part)
bBlEnd2:	.byte	0			; .. int part
wBlDiff1:	.word	0			; (start1 - end1) / 32.
wBlDiff2:	.word	0			; (start2 - end2) / 32.

KeyToPpu:	.word	C_KEY_LEFT,  P_KEY_LEFT
		.word	C_KEY_RIGHT, P_KEY_RIGHT
		.word	C_KEY_UP,    P_KEY_UP
		.word	C_KEY_DOWN,  P_KEY_DOWN
		.word	C_KEY_SPACE, P_KEY_FIRE
KeyToPpuEnd:

JoyReTable:	.word	P_KEY_UP,    P_KEY_UP
JoyReTableR:	.word	P_KEY_RIGHT, P_KEY_RIGHT
JoyReTableD:	.word	P_KEY_DOWN,  P_KEY_DOWN
JoyReTableL:	.word	P_KEY_LEFT,  P_KEY_LEFT
JoyReTableF:	.word	P_KEY_FIRE,  P_KEY_FIRE
JoyReTableEnd:

MsgJoy000:	.asciz	<2>"JOYSTICK SETUP"
MsgJoy001:	.asciz	<1>"PRESS ANY KEY TO USE DEFAULTS"
MsgJoy002:	.asciz	<3>"PRESS UP"
MsgJoy003:	.asciz	<3>"PRESS RIGHT"
MsgJoy004:	.asciz	<3>"PRESS DOWN"
MsgJoy005:	.asciz	<3>"PRESS LEFT"
MsgJoy006:	.asciz	<3>"PRESS FIRE"

MsgMenu01:	.asciz	<2>"1"<1>" ; JOYSTICK SETUP"
MsgMenu02:	.asciz	<2>"2"<1>" ; VSYNC SETUP"
MsgMenu03:	.asciz	<2>"3"<1>" ; SOUND"
MsgMenu04:	.asciz	<2>"4"<1>" ; DEBUG"
MsgOn:		.asciz	<2>"ON "
MsgOff:		.asciz	<1>"OFF"
MsgMenu00:	.asciz	<3>"0"<1>" ; QUIT"
MsgMenuSt:	.asciz	<1>"PRESS "<2>"SPACE"<1>">"<2>"FIRE"<1>" TO START"

MsgTime00:	.asciz	<1>"FOR SETUP "<2>"VSYNC"<1>" TIMER ON BK0010"
		.asciz	<1>"USE "<3>"ARROW"<1>" KEYS TO ADJUST SLIDER"
		.asciz	<1>"PRESS  "<3>"SPACE"<1>" WHEN SHIP IS FULLY"
		.asciz	<1>"VISIBLE AT THE BOTTOM"
		.even


; blocks table (8 objects)
; +00 object id (0-nothing, 1..2 - explosions, 3-house, 4-mine, 5-ship, 6-helicopter, 7-boat, 8-bridge)
; +01 object direction (0 - moving left)
; +02 (WORD) object x
; +04 object y (line number 0..255)
; +05 object is moving = 0 (if movable), >0 - time to move
; +06 object animation counter
; +07 state flags
Block0: 	.blkb   8.
Block1:		.blkb	8.
Block2:		.blkb	8.
Block3:		.blkb	8.
Block4:		.blkb	8.
Block5:		.blkb	8.
Block6:		.blkb	8.
Block7:		.blkb	8.
Block8:		.blkb	8.
Block9:
	

; tables for random placement of objects fine tuning
RNDT0L:		.word	RNDT00, RNDT01, RNDT02, RNDT03, RNDT04, RNDT05, RNDT06
		.word	RNDT07, RNDT08, RNDT09, RNDT10, RNDT11, RNDT12, RNDT13, RNDT14

.radix 10
RNDT00:		.byte	0,  0,  0,  0,  0,  0,  0,  0
RNDT01:		.byte	0,  1,  0,  1,  0,  1,  0,  1
RNDT02:		.byte	0,  1,  2,  0,  1,  2,  0,  1
RNDT03:		.byte	0,  1,  3,  2,  0,  1,  3,  2
RNDT04:		.byte	1,  2,  3,  4,  1,  2,  3,  0
RNDT05:		.byte	1,  2,  5,  3,  0,  4,  2,  3
RNDT06:		.byte	1,  3,  6,  0,  2,  4,  5,  3
RNDT07:		.byte	1,  3,  5,  7,  2,  4,  6,  4
RNDT08:		.byte	0,  2,  4,  6,  8,  6,  4,  2
RNDT09:		.byte	1,  3,  5,  7,  8,  7,  3,  5
RNDT10:		.byte	2,  4,  6,  8,  9,  6,  4,  2
RNDT11:		.byte	1,  3,  5,  6,  9, 10,  5,  6
RNDT12:		.byte	1,  4,  6,  9, 11,  7,  6,  3
RNDT13:		.byte	2,  5,  7, 10, 12,  5,  6,  4
RNDT14:		.byte	2,  4,  6,  8, 10, 12, 14,  7
; 16 bytes for random coords in straight section (5..31) a bit aligned left because of ship size
;                       0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15
RNDT1L:		.byte	5,  6,  7, 10, 12, 14, 15, 17, 18, 20, 22, 23, 13, 14, 11, 16
; 16 bytes for random of river banks width
BanksRandom:	.byte	1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  2,  4,  6
.radix 8

; //////////////////////////////////////////////////////////////////////////////	
; // GRAPHICS DATA

; 7-lines font (!) SEVEN 7777771111!!1
FontData:
	.byte	76, 147, 147, 147, 147, 177, 76
	.byte	30, 34, 34, 30, 30, 176, 176
	.byte	76, 163, 70, 34, 16, 177, 177
	.byte	176, 60, 30, 60, 147, 177, 76
	.byte	3, 3, 73, 177, 70, 70, 70
	.byte	177, 7, 77, 140, 147, 177, 76
	.byte	76, 7, 77, 147, 147, 177, 76
	.byte	177, 161, 70, 34, 16, 7, 7
	.byte	76, 147, 76, 147, 147, 177, 76
	.byte	76, 147, 147, 176, 70, 34, 16
	.byte	0, 30, 30, 0, 30, 30, 0
	.byte	0, 0, 0, 76, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 30, 30
	.byte	0, 0, 0, 0, 0, 30, 30
	.byte	0, 0, 60, 30, 14, 6, 0
	.byte	30, 30, 30, 30, 0, 30, 30
	.byte	0, 0, 0, 0, 0, 0, 0
	.byte	34, 76, 147, 147, 177, 147, 147
	.byte	77, 147, 77, 147, 147, 147, 77
	.byte	76, 147, 7, 7, 147, 177, 76
	.byte	37, 67, 147, 147, 67, 77, 37
	.byte	177, 7, 77, 7, 7, 177, 177
	.byte	177, 7, 77, 7, 7, 7, 7
	.byte	176, 7, 7, 167, 147, 177, 176
	.byte	147, 147, 177, 147, 147, 147, 147
	.byte	76, 34, 34, 34, 34, 76, 76
	.byte	140, 140, 140, 140, 147, 176, 74
	.byte	147, 67, 37, 37, 67, 147, 147
	.byte	7, 7, 7, 7, 7, 177, 177
	.byte	143, 167, 177, 153, 143, 143, 143
	.byte	147, 157, 177, 177, 177, 167, 147
	.byte	76, 143, 143, 143, 143, 177, 76
	.byte	77, 147, 147, 177, 77, 7, 7
	.byte	76, 147, 147, 147, 67, 176, 154
	.byte	77, 147, 147, 77, 77, 147, 147
	.byte	76, 7, 76, 140, 140, 177, 77
	.byte	177, 34, 34, 34, 34, 34, 34
	.byte	147, 147, 147, 147, 147, 177, 177
	.byte	147, 147, 147, 147, 177, 76, 34
	.byte	143, 143, 153, 177, 177, 167, 143
	.byte	147, 147, 74, 74, 147, 147, 147
	.byte	143, 143, 76, 34, 34, 34, 34
	.byte	177, 70, 34, 16, 7, 177, 177
	.byte	0, 0, 0, 0, 0, 0, 76
	.byte	30, 34, 14, 14, 14, 34, 30
	.byte	14, 34, 30, 30, 30, 34, 14


; buffer for first lines
FirstLinesBuf:	.blkb	2*C_SCRWID

; road colors
RoadCo:		.word	^B1010101010101010, ^B1010101010101010, ^B1010101010101010, ^B1010101010101010
		.word	177777, 177777, 177777, 0, 0, 0, 0, 0, 0, 0, 0, ^B1010000010100000
		.word	^B1010000010100000, 0, 0, 0, 0, 0, 0, 0, 0, 177777, 177777, 177777
		.word	^B1010101010101010, ^B1010101010101010, ^B1010101010101010, ^B1010101010101010
; bridge colors
BridgeCo:	.word	^B0101010101010101, ^B0101010101010101, ^B0101010101010101, ^B0101010101010101
		.word	177777, 177777, 177777, 0, 0, 0, 0, 0, 0, 0, 0, ^B1010000010100000
		.word	^B1010000010100000, 0, 0, 0, 0, 0, 0, 0, 0, 177777, 177777, 177777
		.word	^B0101010101010101, ^B0101010101010101, ^B0101010101010101, ^B0101010101010101

; helicopter explosion
WSPL10:	.word	WSP100, WSP102, WSP104, WSP106
WSPL11:	.word	WSP110, WSP112, WSP114, WSP116

WSP100:	.word	52525, 52525, 52525, 122525, 52525, 52525, 52525, 52645
	.word	52525, 52645, 52525, 52525, 52525, 52532, 52525, 55125
	.word	52525, 52525, 52525, 55125, 52525, 122525, 52525, 52525
	.word	52525, 52645, 52525, 52525, 52525, 52525
WSP102:	.word	52525, 52525, 52525, 52525, 52532, 52525, 52525, 55125
	.word	52525, 55125, 52525, 52525, 52525, 52645, 52525, 122525
	.word	52525, 52525, 52525, 122525, 52525, 52525, 52532, 52525
	.word	52525, 55125, 52525, 52525, 52525, 52525
WSP104:	.word	52525, 52525, 52525, 52525, 52645, 52525, 52525, 122525
	.word	52525, 122525, 52525, 52525, 52525, 55125, 52525, 52525
	.word	52532, 52525, 52525, 52525, 52532, 52525, 52645, 52525
	.word	52525, 122525, 52525, 52525, 52525, 52525
WSP106:	.word	52525, 52525, 52525, 52525, 55125, 52525, 52525, 52525
	.word	52532, 52525, 52532, 52525, 52525, 122525, 52525, 52525
	.word	52645, 52525, 52525, 52525, 52645, 52525, 55125, 52525
	.word	52525, 52525, 52532, 52525, 52525, 52525
WSP110:	.word	122525, 52525, 52525, 52525, 50125, 52525, 52532, 52525
	.word	52525, 50125, 52525, 52525, 52525, 52645, 52525, 52405
	.word	2525, 52525, 2525, 52525, 52525, 52525, 55125, 52525
	.word	52532, 52532, 52525, 50125, 52525, 52525
WSP112:	.word	52525, 52532, 52525, 52525, 2525, 52525, 52645, 52525
	.word	52525, 2525, 52525, 52525, 52525, 55125, 52525, 50125
	.word	52525, 52520, 52525, 52520, 52525, 52525, 122525, 52525
	.word	52645, 52645, 52525, 2525, 52525, 52525
WSP114:	.word	52525, 52645, 52525, 52525, 52525, 52520, 55125, 52525
	.word	52525, 52525, 52520, 52525, 52525, 122525, 52525, 2525
	.word	52525, 52405, 52525, 52405, 52525, 52525, 52525, 52532
	.word	55125, 55125, 52525, 52525, 52520, 52525
WSP116:	.word	52525, 55125, 52525, 52525, 52525, 52405, 122525, 52525
	.word	52525, 52525, 52405, 52525, 52525, 52525, 52532, 52525
	.word	52520, 50125, 52525, 50125, 52525, 52525, 52525, 52645
	.word	122525, 122525, 52525, 52525, 52405, 52525

; ship explosion
WSPL12:	.word	WSP120, WSP122, WSP124, WSP126
WSPL13:	.word	WSP130, WSP132, WSP134, WSP136

WSP120:	.word	52525, 125125, 52525, 52525, 52525, 52525, 52525, 125125
	.word	52525, 52525, 125125, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52652, 52525, 52525, 52525, 52652, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52652, 52525, 52525, 125125
	.word	52525, 52525, 52525, 52525, 52525, 125125, 52525, 52525
WSP122:	.word	52525, 122525, 52532, 52525, 52525, 52525, 52525, 122525
	.word	52532, 52525, 122525, 52532, 52525, 52525, 52525, 52525
	.word	52525, 55245, 52525, 52525, 52525, 55245, 52525, 52525
	.word	52525, 52525, 52525, 52525, 55245, 52525, 52525, 122525
	.word	52532, 52525, 52525, 52525, 52525, 122525, 52532, 52525
WSP124:	.word	52525, 52525, 52652, 52525, 52525, 52525, 52525, 52525
	.word	52652, 52525, 52525, 52652, 52525, 52525, 52525, 52525
	.word	52525, 125125, 52525, 52525, 52525, 125125, 52525, 52525
	.word	52525, 52525, 52525, 52525, 125125, 52525, 52525, 52525
	.word	52652, 52525, 52525, 52525, 52525, 52525, 52652, 52525
WSP126:	.word	52525, 52525, 55245, 52525, 52525, 52525, 52525, 52525
	.word	55245, 52525, 52525, 55245, 52525, 52525, 52525, 52525
	.word	52525, 122525, 52532, 52525, 52525, 122525, 52532, 52525
	.word	52525, 52525, 52525, 52525, 122525, 52532, 52525, 52525
	.word	55245, 52525, 52525, 52525, 52525, 52525, 55245, 52525
WSP130:	.word	52525, 125125, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52400, 52525, 52652, 52525, 52525, 52525, 52525, 52525
	.word	52400, 52525, 52525, 52525, 52525, 52525, 125125, 52525
	.word	52525, 125, 52525, 52525, 125, 52525, 52525, 125
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52652, 52525
WSP132:	.word	52525, 122525, 52532, 52525, 52525, 52525, 52525, 52525
	.word	50005, 52525, 55245, 52525, 52525, 52525, 52525, 52525
	.word	50005, 52525, 52525, 52525, 52525, 52525, 122525, 52532
	.word	52525, 2525, 52520, 52525, 2525, 52520, 52525, 2525
	.word	52520, 52525, 52525, 52525, 52525, 52525, 55245, 52525
WSP134:	.word	52525, 52525, 52652, 52525, 52525, 52525, 52525, 52525
	.word	125, 52525, 125125, 52525, 52525, 52525, 52525, 52525
	.word	125, 52525, 52525, 52525, 52525, 52525, 52525, 52652
	.word	52525, 52525, 52400, 52525, 52525, 52400, 52525, 52525
	.word	52400, 52525, 52525, 52525, 52525, 52525, 125125, 52525
WSP136:	.word	52525, 52525, 55245, 52525, 52525, 52525, 52525, 52525
	.word	2525, 52520, 122525, 52532, 52525, 52525, 52525, 52525
	.word	2525, 52520, 52525, 52525, 52525, 52525, 52525, 55245
	.word	52525, 52525, 50005, 52525, 52525, 50005, 52525, 52525
	.word	50005, 52525, 52525, 52525, 52525, 52525, 122525, 52532

	
; house 32 x 20 (4 words x 20 lines)
WSPRI3:	.word	WCP30, WCP31
WCP30:	.word	125252, 2, 124000, 125252, 1252, 0, 0, 125250
	.word	2, 0, 0, 124000, 177776, 177777, 177777, 125777
	.word	1776, 1774, 1774, 125774, 1776, 1774, 1774, 125774
	.word	1776, 1774, 1774, 125774, 177776, 177777, 177777, 125777
	.word	125252, 125252, 125252, 125252, 125252, 125252, 177652, 125252
	.word	125252, 125252, 177652, 125252, 125252, 125252, 177652, 125252
	.word	125252, 125252, 177777, 125377, 125252, 125252, 177777, 125377
	.word	125252, 125252, 177777, 125377, 125252, 177652, 177777, 177777
	.word	125252, 177652, 177777, 177777, 125252, 125252, 177777, 125377
	.word	125252, 125252, 252, 125252, 125252, 125252, 252, 125252
WCP31:	.word	125252, 52, 100000, 125252, 25252, 0, 0, 125200
	.word	52, 0, 0, 100000, 177752, 177777, 177777, 137777
	.word	37752, 37700, 37700, 137700, 37752, 37700, 37700, 137700
	.word	37752, 37700, 37700, 137700, 177752, 177777, 177777, 137777
	.word	125252, 125252, 125252, 125252, 125252, 125377, 125252, 125252
	.word	125252, 125377, 125252, 125252, 125252, 125377, 125252, 125252
	.word	177652, 177777, 125252, 125252, 177652, 177777, 125252, 125252
	.word	177652, 177777, 125252, 125252, 177777, 177777, 125377, 125252
	.word	177777, 177777, 125377, 125252, 177652, 177777, 125252, 125252
	.word	125252, 125000, 125252, 125252, 125252, 125000, 125252, 125252


; mine 
WCP40:	.word	12525, 52524, 12521, 42524, 405, 50100, 5, 50000
	.word	7425, 52000, 7405, 50000, 5, 50000, 0, 0
	.word	63145, 63146

; mine explosion
WCP41:	.word	122525, 52525, 52525, 52645, 52645, 52525, 52525, 52532
	.word	55125, 52525, 52525, 52525, 52525, 52645, 52645, 52525
	.word	52525, 64532
WCP42:	.word	52525, 52525, 50125, 52525, 52525, 52645, 52405, 2525
	.word	2525, 52525, 52525, 55125, 52532, 52532, 50125, 52525
	.word	52525, 52405


; just blue color ^_^
WCPBLU:	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525
	.word	52525, 52525, 52525, 52525, 52525, 52525, 52525, 52525


; ship 40 x 8
WSP50L:	.word	WSP500, WSP501, WSP502, WSP503, WSP504, WSP505, WSP506, WSP507
WSP51L:	.word	WSP510, WSP511, WSP512, WSP513, WSP514, WSP515, WSP516, WSP517

WSP500:	.word	52525, 125, 52525, 52525, 52525, 52525, 125, 52525
	.word	52525, 52525, 52525, 0, 52525, 52525, 52525, 125
	.word	0, 52400, 52525, 52525, 177775, 177777, 177777, 177777
	.word	52525, 177775, 177777, 177777, 52777, 52525, 125251, 125252
	.word	125252, 52525, 52525, 125125, 125252, 125252, 52525, 52525
WSP501:	.word	52525, 525, 52524, 52525, 52525, 52525, 525, 52524
	.word	52525, 52525, 52525, 1, 52524, 52525, 52525, 525
	.word	0, 52000, 52525, 52525, 177765, 177777, 177777, 177777
	.word	52527, 177765, 177777, 177777, 53777, 52525, 125245, 125252
	.word	125252, 52526, 52525, 124525, 125252, 125252, 52526, 52525
WSP502:	.word	52525, 2525, 52520, 52525, 52525, 52525, 2525, 52520
	.word	52525, 52525, 52525, 5, 52520, 52525, 52525, 2525
	.word	0, 50000, 52525, 52525, 177725, 177777, 177777, 177777
	.word	52537, 177725, 177777, 177777, 57777, 52525, 125225, 125252
	.word	125252, 52532, 52525, 122525, 125252, 125252, 52532, 52525
WSP503:	.word	52525, 12525, 52500, 52525, 52525, 52525, 12525, 52500
	.word	52525, 52525, 52525, 25, 52500, 52525, 52525, 12525
	.word	0, 40000, 52525, 52525, 177525, 177777, 177777, 177777
	.word	52577, 177525, 177777, 177777, 77777, 52525, 125125, 125252
	.word	125252, 52552, 52525, 112525, 125252, 125252, 52552, 52525
WSP504:	.word	52525, 52525, 52400, 52525, 52525, 52525, 52525, 52400
	.word	52525, 52525, 52525, 125, 52400, 52525, 52525, 52525
	.word	0, 0, 52525, 52525, 176525, 177777, 177777, 177777
	.word	52777, 176525, 177777, 177777, 177777, 52525, 124525, 125252
	.word	125252, 52652, 52525, 52525, 125252, 125252, 52652, 52525
WSP505:	.word	52525, 52525, 52001, 52525, 52525, 52525, 52525, 52001
	.word	52525, 52525, 52525, 525, 52000, 52525, 52525, 52525
	.word	1, 0, 52524, 52525, 172525, 177777, 177777, 177777
	.word	53777, 172525, 177777, 177777, 177777, 52527, 122525, 125252
	.word	125252, 53252, 52525, 52525, 125251, 125252, 53252, 52525
WSP506:	.word	52525, 52525, 50005, 52525, 52525, 52525, 52525, 50005
	.word	52525, 52525, 52525, 2525, 50000, 52525, 52525, 52525
	.word	5, 0, 52520, 52525, 152525, 177777, 177777, 177777
	.word	57777, 152525, 177777, 177777, 177777, 52537, 112525, 125252
	.word	125252, 55252, 52525, 52525, 125245, 125252, 55252, 52525
WSP507:	.word	52525, 52525, 40025, 52525, 52525, 52525, 52525, 40025
	.word	52525, 52525, 52525, 12525, 40000, 52525, 52525, 52525
	.word	25, 0, 52500, 52525, 52525, 177777, 177777, 177777
	.word	77777, 52525, 177777, 177777, 177777, 52577, 52525, 125252
	.word	125252, 65252, 52525, 52525, 125225, 125252, 65252, 52525
WSP510:	.word	52525, 52525, 52400, 52525, 52525, 52525, 52525, 52400
	.word	52525, 52525, 52525, 52525, 0, 52525, 52525, 52525
	.word	125, 0, 52400, 52525, 177777, 177777, 177777, 177777
	.word	52525, 177525, 177777, 177777, 177777, 52525, 52525, 125252
	.word	125252, 125252, 52525, 52525, 125252, 125252, 52652, 52525
WSP511:	.word	52525, 52525, 52001, 52525, 52525, 52525, 52525, 52001
	.word	52525, 52525, 52525, 52525, 1, 52524, 52525, 52525
	.word	525, 0, 52000, 52525, 177775, 177777, 177777, 177777
	.word	52527, 176525, 177777, 177777, 177777, 52527, 52525, 125251
	.word	125252, 125252, 52526, 52525, 125251, 125252, 53252, 52525
WSP512:	.word	52525, 52525, 50005, 52525, 52525, 52525, 52525, 50005
	.word	52525, 52525, 52525, 52525, 5, 52520, 52525, 52525
	.word	2525, 0, 50000, 52525, 177765, 177777, 177777, 177777
	.word	52537, 172525, 177777, 177777, 177777, 52537, 52525, 125245
	.word	125252, 125252, 52532, 52525, 125245, 125252, 55252, 52525
WSP513:	.word	52525, 52525, 40025, 52525, 52525, 52525, 52525, 40025
	.word	52525, 52525, 52525, 52525, 25, 52500, 52525, 52525
	.word	12525, 0, 40000, 52525, 177725, 177777, 177777, 177777
	.word	52577, 152525, 177777, 177777, 177777, 52577, 52525, 125225
	.word	125252, 125252, 52552, 52525, 125225, 125252, 65252, 52525
WSP514:	.word	52525, 52525, 125, 52525, 52525, 52525, 52525, 125
	.word	52525, 52525, 52525, 52525, 125, 52400, 52525, 52525
	.word	52525, 0, 0, 52525, 177525, 177777, 177777, 177777
	.word	52777, 52525, 177777, 177777, 177777, 52777, 52525, 125125
	.word	125252, 125252, 52652, 52525, 125125, 125252, 125252, 52525
WSP515:	.word	52525, 52525, 525, 52524, 52525, 52525, 52525, 525
	.word	52524, 52525, 52525, 52525, 525, 52000, 52525, 52525
	.word	52525, 1, 0, 52524, 176525, 177777, 177777, 177777
	.word	53777, 52525, 177775, 177777, 177777, 53777, 52525, 124525
	.word	125252, 125252, 53252, 52525, 124525, 125252, 125252, 52526
WSP516:	.word	52525, 52525, 2525, 52520, 52525, 52525, 52525, 2525
	.word	52520, 52525, 52525, 52525, 2525, 50000, 52525, 52525
	.word	52525, 5, 0, 52520, 172525, 177777, 177777, 177777
	.word	57777, 52525, 177765, 177777, 177777, 57777, 52525, 122525
	.word	125252, 125252, 55252, 52525, 122525, 125252, 125252, 52532
WSP517:	.word	52525, 52525, 12525, 52500, 52525, 52525, 52525, 12525
	.word	52500, 52525, 52525, 52525, 12525, 40000, 52525, 52525
	.word	52525, 25, 0, 52500, 152525, 177777, 177777, 177777
	.word	77777, 52525, 177725, 177777, 177777, 77777, 52525, 112525
	.word	125252, 125252, 65252, 52525, 112525, 125252, 125252, 52552


; helicopter 24 x 10
; by animation number & direction (0-bit - direction, 1-bit - animation)
WSP60A:	.word	WSP60L, WSP61L, WSP62L, WSP63L
WSP60L:	.word	WSP600, WSP601, WSP602, WSP603, WSP604, WSP605, WSP606, WSP607
WSP61L:	.word	WSP610, WSP611, WSP612, WSP613, WSP614, WSP615, WSP616, WSP617
WSP62L:	.word	WSP620, WSP621, WSP622, WSP623, WSP624, WSP625, WSP626, WSP627
WSP63L:	.word	WSP630, WSP631, WSP632, WSP633, WSP634, WSP635, WSP636, WSP637

WSP600:	.word	122525, 52652, 52525, 52525, 125245, 52525, 52525, 52645
	.word	52525, 52525, 50000, 52525, 2501, 4000, 52525, 211
	.word	124000, 52525, 1, 0, 52525, 52501, 50000, 52525
	.word	52525, 52405, 52525, 52525, 55252, 52525
WSP601:	.word	112525, 53252, 52525, 52525, 125225, 52526, 52525, 53225
	.word	52525, 52525, 40001, 52525, 12405, 20000, 52524, 1045
	.word	120000, 52526, 5, 0, 52524, 52405, 40001, 52525
	.word	52525, 52025, 52525, 52525, 65251, 52525
WSP602:	.word	52525, 55252, 52525, 52525, 125125, 52532, 52525, 55125
	.word	52525, 52525, 5, 52525, 52025, 100000, 52520, 4225
	.word	100000, 52532, 25, 0, 52520, 52025, 5, 52525
	.word	52525, 50125, 52525, 52525, 125245, 52525
WSP603:	.word	52525, 65251, 52525, 52525, 124525, 52552, 52525, 64525
	.word	52525, 52525, 25, 52524, 50125, 1, 52502, 21125
	.word	0, 52552, 125, 0, 52500, 50125, 25, 52524
	.word	52525, 40525, 52525, 52525, 125225, 52526
WSP604:	.word	52525, 125245, 52525, 52525, 122525, 52652, 52525, 122525
	.word	52525, 52525, 125, 52520, 40525, 5, 52410, 104525
	.word	0, 52650, 525, 0, 52400, 40525, 125, 52520
	.word	52525, 2525, 52525, 52525, 125125, 52532
WSP605:	.word	52525, 125225, 52526, 52525, 112525, 53252, 52525, 112525
	.word	52526, 52525, 525, 52500, 2525, 25, 52040, 22525
	.word	2, 53240, 2525, 0, 52000, 2525, 525, 52500
	.word	52525, 12525, 52524, 52525, 124525, 52552
WSP606:	.word	52525, 125125, 52532, 52525, 52525, 55252, 52525, 52525
	.word	52532, 52525, 2525, 52400, 12525, 124, 50200, 112525
	.word	10, 55200, 12525, 0, 50000, 12525, 2524, 52400
	.word	52525, 52525, 52520, 52525, 122525, 52652
WSP607:	.word	52525, 124525, 52552, 52525, 52525, 65251, 52525, 52525
	.word	52551, 52525, 12525, 52000, 52525, 520, 41000, 52525
	.word	42, 65000, 52525, 0, 40000, 52525, 12520, 52000
	.word	52525, 52525, 52501, 52525, 112525, 53252
WSP610:	.word	125125, 52532, 52525, 55252, 52525, 52525, 55125, 52525
	.word	52525, 5, 52525, 52525, 40, 2520, 52525, 52
	.word	104000, 52525, 0, 0, 52525, 5, 2525, 52525
	.word	50125, 52525, 52525, 125245, 52525, 52525
WSP611:	.word	124525, 52552, 52525, 65251, 52525, 52525, 64525, 52525
	.word	52525, 25, 52524, 52525, 201, 12500, 52524, 251
	.word	20000, 52526, 1, 0, 52524, 25, 12524, 52524
	.word	40525, 52525, 52525, 125225, 52526, 52525
WSP612:	.word	122525, 52652, 52525, 125245, 52525, 52525, 122525, 52525
	.word	52525, 125, 52520, 52525, 1005, 52400, 52520, 1245
	.word	100000, 52530, 5, 0, 52520, 125, 52520, 52520
	.word	2525, 52525, 52525, 125125, 52532, 52525
WSP613:	.word	112525, 53252, 52525, 125225, 52526, 52525, 112525, 52526
	.word	52525, 525, 52500, 52525, 4025, 52000, 52501, 5225
	.word	0, 52542, 25, 0, 52500, 525, 52500, 52501
	.word	12525, 52524, 52525, 124525, 52552, 52525
WSP614:	.word	52525, 55252, 52525, 125125, 52532, 52525, 52525, 52532
	.word	52525, 2525, 52400, 52525, 20125, 50000, 52405, 25125
	.word	0, 52610, 125, 0, 52400, 2525, 52400, 52405
	.word	52525, 52520, 52525, 122525, 52652, 52525
WSP615:	.word	52525, 65251, 52525, 124525, 52552, 52525, 52525, 52551
	.word	52525, 12525, 52000, 52525, 100525, 40000, 52025, 124525
	.word	0, 53040, 525, 0, 52000, 12525, 52000, 52025
	.word	52525, 52501, 52525, 112525, 53252, 52525
WSP616:	.word	52525, 125245, 52525, 122525, 52652, 52525, 52525, 52645
	.word	52525, 52525, 50000, 52525, 2525, 2, 50125, 122525
	.word	2, 54200, 2525, 0, 50000, 52525, 50000, 50125
	.word	52525, 52405, 52525, 52525, 55252, 52525
WSP617:	.word	52525, 125225, 52526, 112525, 53252, 52525, 52525, 53225
	.word	52525, 52525, 40001, 52525, 12525, 10, 40524, 112525
	.word	12, 61000, 12525, 0, 40000, 52525, 40001, 40525
	.word	52525, 52025, 52525, 52525, 65251, 52525
WSP620:	.word	52525, 125245, 52525, 122525, 52652, 52525, 52525, 52645
	.word	52525, 52525, 50000, 52525, 2541, 4000, 52525, 1
	.word	124000, 52525, 41, 0, 52525, 52501, 50000, 52525
	.word	52525, 52405, 52525, 52525, 55252, 52525
WSP621:	.word	52525, 125225, 52526, 112525, 53252, 52525, 52525, 53225
	.word	52525, 52525, 40001, 52525, 12605, 20000, 52524, 5
	.word	120000, 52526, 205, 0, 52524, 52405, 40001, 52525
	.word	52525, 52025, 52525, 52525, 65251, 52525
WSP622:	.word	52525, 125125, 52532, 52525, 55252, 52525, 52525, 55125
	.word	52525, 52525, 5, 52525, 53025, 100000, 52520, 25
	.word	100000, 52532, 1025, 0, 52520, 52025, 5, 52525
	.word	52525, 50125, 52525, 52525, 125245, 52525
WSP623:	.word	52525, 124525, 52552, 52525, 65251, 52525, 52525, 64525
	.word	52525, 52525, 25, 52524, 54125, 1, 52502, 125
	.word	0, 52552, 4125, 0, 52500, 50125, 25, 52524
	.word	52525, 40525, 52525, 52525, 125225, 52526
WSP624:	.word	52525, 122525, 52652, 52525, 125245, 52525, 52525, 122525
	.word	52525, 52525, 125, 52520, 60525, 5, 52410, 525
	.word	0, 52650, 20525, 0, 52400, 40525, 125, 52520
	.word	52525, 2525, 52525, 52525, 125125, 52532
WSP625:	.word	52525, 112525, 53252, 52525, 125225, 52526, 52525, 112525
	.word	52526, 52525, 525, 52500, 102525, 25, 52040, 2525
	.word	0, 53240, 102525, 0, 52000, 2525, 525, 52500
	.word	52525, 12525, 52524, 52525, 124525, 52552
WSP626:	.word	52525, 52525, 55252, 52525, 125125, 52532, 52525, 52525
	.word	52532, 52525, 2525, 52400, 12525, 126, 50200, 12525
	.word	0, 55200, 12525, 2, 50000, 12525, 2524, 52400
	.word	52525, 52525, 52520, 52525, 122525, 52652
WSP627:	.word	52525, 52525, 65251, 52525, 124525, 52552, 52525, 52525
	.word	52551, 52525, 12525, 52000, 52525, 530, 41000, 52525
	.word	0, 65000, 52525, 10, 40000, 52525, 12520, 52000
	.word	52525, 52525, 52501, 52525, 112525, 53252
WSP630:	.word	55252, 52525, 52525, 125125, 52532, 52525, 55125, 52525
	.word	52525, 5, 52525, 52525, 40, 22520, 52525, 52
	.word	0, 52525, 0, 20000, 52525, 5, 2525, 52525
	.word	50125, 52525, 52525, 125245, 52525, 52525
WSP631:	.word	65251, 52525, 52525, 124525, 52552, 52525, 64525, 52525
	.word	52525, 25, 52524, 52525, 201, 112500, 52524, 251
	.word	0, 52524, 1, 100000, 52524, 25, 12524, 52524
	.word	40525, 52525, 52525, 125225, 52526, 52525
WSP632:	.word	125245, 52525, 52525, 122525, 52652, 52525, 122525, 52525
	.word	52525, 125, 52520, 52525, 1005, 52400, 52522, 1245
	.word	0, 52520, 5, 0, 52522, 125, 52520, 52520
	.word	2525, 52525, 52525, 125125, 52532, 52525
WSP633:	.word	125225, 52526, 52525, 112525, 53252, 52525, 112525, 52526
	.word	52525, 525, 52500, 52525, 4025, 52000, 52511, 5225
	.word	0, 52500, 25, 0, 52510, 525, 52500, 52501
	.word	12525, 52524, 52525, 124525, 52552, 52525
WSP634:	.word	125125, 52532, 52525, 52525, 55252, 52525, 52525, 52532
	.word	52525, 2525, 52400, 52525, 20125, 50000, 52445, 25125
	.word	0, 52400, 125, 0, 52440, 2525, 52400, 52405
	.word	52525, 52520, 52525, 122525, 52652, 52525
WSP635:	.word	124525, 52552, 52525, 52525, 65251, 52525, 52525, 52551
	.word	52525, 12525, 52000, 52525, 100525, 40000, 52225, 124525
	.word	0, 52000, 525, 0, 52200, 12525, 52000, 52025
	.word	52525, 52501, 52525, 112525, 53252, 52525
WSP636:	.word	122525, 52652, 52525, 52525, 125245, 52525, 52525, 52645
	.word	52525, 52525, 50000, 52525, 2525, 2, 51125, 122525
	.word	2, 50000, 2525, 0, 51000, 52525, 50000, 50125
	.word	52525, 52405, 52525, 52525, 55252, 52525
WSP637:	.word	112525, 53252, 52525, 52525, 125225, 52526, 52525, 53225
	.word	52525, 52525, 40001, 52525, 12525, 10, 44524, 112525
	.word	12, 40000, 12525, 0, 44000, 52525, 40001, 40525
	.word	52525, 52025, 52525, 52525, 65251, 52525


; boat 24 x 6
WSP70L:	.word	WSP700, WSP701, WSP702, WSP703, WSP704, WSP705, WSP706, WSP707
WSP71L:	.word	WSP710, WSP711, WSP712, WSP713, WSP714, WSP715, WSP716, WSP717

WSP700:	.word	40125, 52525, 52525, 25, 52520, 52525, 100005, 52002
	.word	52525, 5, 0, 52525, 177765, 57777, 52525, 125225
	.word	52652, 52525
WSP701:	.word	525, 52525, 52525, 125, 52500, 52525, 25, 50012
	.word	52525, 25, 0, 52524, 177725, 77777, 52525, 125125
	.word	53252, 52525
WSP702:	.word	2525, 52524, 52525, 525, 52400, 52525, 125, 40050
	.word	52525, 125, 0, 52520, 177525, 177777, 52525, 124525
	.word	55252, 52525
WSP703:	.word	12525, 52520, 52525, 2525, 52000, 52525, 525, 240
	.word	52525, 525, 0, 52500, 176525, 177777, 52527, 122525
	.word	65252, 52525
WSP704:	.word	52525, 52500, 52525, 12525, 50000, 52525, 2525, 1200
	.word	52524, 2525, 0, 52400, 172525, 177777, 52537, 112525
	.word	125252, 52525
WSP705:	.word	52525, 52401, 52525, 52525, 40000, 52525, 12525, 5000
	.word	52520, 12525, 0, 52000, 152525, 177777, 52577, 52525
	.word	125252, 52526
WSP706:	.word	52525, 52005, 52525, 52525, 1, 52525, 52525, 24000
	.word	52500, 52525, 0, 50000, 52525, 177777, 52777, 52525
	.word	125251, 52532
WSP707:	.word	52525, 50025, 52525, 52525, 5, 52524, 52525, 120001
	.word	52400, 52525, 1, 40000, 52525, 177775, 53777, 52525
	.word	125245, 52552
WSP710:	.word	52525, 52005, 52525, 12525, 50000, 52525, 125, 40012
	.word	52525, 0, 40000, 52525, 177765, 77777, 52525, 125125
	.word	55252, 52525
WSP711:	.word	52525, 50025, 52525, 52525, 40000, 52525, 525, 50
	.word	52525, 1, 0, 52525, 177725, 177777, 52525, 124525
	.word	65252, 52525
WSP712:	.word	52525, 40125, 52525, 52525, 1, 52525, 2525, 240
	.word	52524, 5, 0, 52524, 177525, 177777, 52527, 122525
	.word	125252, 52525
WSP713:	.word	52525, 525, 52525, 52525, 5, 52524, 12525, 1200
	.word	52520, 25, 0, 52520, 176525, 177777, 52537, 112525
	.word	125252, 52526
WSP714:	.word	52525, 2525, 52524, 52525, 25, 52520, 52525, 5000
	.word	52500, 125, 0, 52500, 172525, 177777, 52577, 52525
	.word	125252, 52532
WSP715:	.word	52525, 12525, 52520, 52525, 125, 52500, 52525, 24001
	.word	52400, 525, 0, 52400, 152525, 177777, 52777, 52525
	.word	125251, 52552
WSP716:	.word	52525, 52525, 52500, 52525, 525, 52400, 52525, 120005
	.word	52000, 2525, 0, 52000, 52525, 177777, 53777, 52525
	.word	125245, 52652
WSP717:	.word	52525, 52525, 52401, 52525, 2525, 52000, 52525, 100025
	.word	50002, 12525, 0, 50000, 52525, 177775, 57777, 52525
	.word	125225, 53252


; our plane, straight, bank left, bank right
WSPT00:	.word	WSP000, WSP001, WSP002, WSP003, WSP004, WSP005, WSP006, WSP007
WSPT01:	.word	WSP010, WSP011, WSP012, WSP013, WSP014, WSP015, WSP016, WSP017
WSPT02:	.word	WSP020, WSP021, WSP022, WSP023, WSP024, WSP025, WSP026, WSP027

WSP000:	.word	140000, 3, 0, 140000, 3, 0, 140000, 3
	.word	0, 176000, 77, 0, 177700, 1777, 0, 177774
	.word	37777, 0, 177774, 37777, 0, 141774, 37703, 0
	.word	140074, 36003, 0, 140000, 3, 0, 176000, 77
	.word	0, 177700, 1777, 0, 141700, 1703, 0
WSP001:	.word	0, 17, 0, 0, 17, 0, 0, 17
	.word	0, 170000, 377, 0, 177400, 7777, 0, 177760
	.word	177777, 0, 177760, 177777, 0, 7760, 177417, 0
	.word	360, 170017, 0, 0, 17, 0, 170000, 377
	.word	0, 177400, 7777, 0, 7400, 7417, 0
WSP002:	.word	0, 74, 0, 0, 74, 0, 0, 74
	.word	0, 140000, 1777, 0, 176000, 37777, 0, 177700
	.word	177777, 3, 177700, 177777, 3, 37700, 176074, 3
	.word	1700, 140074, 3, 0, 74, 0, 140000, 1777
	.word	0, 176000, 37777, 0, 36000, 36074, 0
WSP003:	.word	0, 360, 0, 0, 360, 0, 0, 360
	.word	0, 0, 7777, 0, 170000, 177777, 0, 177400
	.word	177777, 17, 177400, 177777, 17, 177400, 170360, 17
	.word	7400, 360, 17, 0, 360, 0, 0, 7777
	.word	0, 170000, 177777, 0, 170000, 170360, 0
WSP004:	.word	0, 1700, 0, 0, 1700, 0, 0, 1700
	.word	0, 0, 37774, 0, 140000, 177777, 3, 176000
	.word	177777, 77, 176000, 177777, 77, 176000, 141703, 77
	.word	36000, 1700, 74, 0, 1700, 0, 0, 37774
	.word	0, 140000, 177777, 3, 140000, 141703, 3
WSP005:	.word	0, 7400, 0, 0, 7400, 0, 0, 7400
	.word	0, 0, 177760, 0, 0, 177777, 17, 170000
	.word	177777, 377, 170000, 177777, 377, 170000, 7417, 377
	.word	170000, 7400, 360, 0, 7400, 0, 0, 177760
	.word	0, 0, 177777, 17, 0, 7417, 17
WSP006:	.word	0, 36000, 0, 0, 36000, 0, 0, 36000
	.word	0, 0, 177700, 3, 0, 177774, 77, 140000
	.word	177777, 1777, 140000, 177777, 1777, 140000, 36077, 1774
	.word	140000, 36003, 1700, 0, 36000, 0, 0, 177700
	.word	3, 0, 177774, 77, 0, 36074, 74
WSP007:	.word	0, 170000, 0, 0, 170000, 0, 0, 170000
	.word	0, 0, 177400, 17, 0, 177760, 377, 0
	.word	177777, 7777, 0, 177777, 7777, 0, 170377, 7760
	.word	0, 170017, 7400, 0, 170000, 0, 0, 177400
	.word	17, 0, 177760, 377, 0, 170360, 360

WSP010:	.word	140000, 3, 0, 140000, 3, 0, 140000, 3
	.word	0, 176000, 3, 0, 177700, 77, 0, 177700
	.word	1777, 0, 177700, 1777, 0, 141700, 1777, 0
	.word	140000, 1703, 0, 140000, 3, 0, 176000, 3
	.word	0, 177700, 77, 0, 140000, 377, 0
WSP011:	.word	0, 17, 0, 0, 17, 0, 0, 17
	.word	0, 170000, 17, 0, 177400, 377, 0, 177400
	.word	7777, 0, 177400, 7777, 0, 7400, 7777, 0
	.word	0, 7417, 0, 0, 17, 0, 170000, 17
	.word	0, 177400, 377, 0, 0, 1777, 0
WSP012:	.word	0, 74, 0, 0, 74, 0, 0, 74
	.word	0, 140000, 77, 0, 176000, 1777, 0, 176000
	.word	37777, 0, 176000, 37777, 0, 36000, 37774, 0
	.word	0, 36074, 0, 0, 74, 0, 140000, 77
	.word	0, 176000, 1777, 0, 0, 7774, 0
WSP013:	.word	0, 360, 0, 0, 360, 0, 0, 360
	.word	0, 0, 377, 0, 170000, 7777, 0, 170000
	.word	177777, 0, 170000, 177777, 0, 170000, 177760, 0
	.word	0, 170360, 0, 0, 360, 0, 0, 377
	.word	0, 170000, 7777, 0, 0, 37760, 0
WSP014:	.word	0, 1700, 0, 0, 1700, 0, 0, 1700
	.word	0, 0, 1774, 0, 140000, 37777, 0, 140000
	.word	177777, 3, 140000, 177777, 3, 140000, 177703, 3
	.word	0, 141700, 3, 0, 1700, 0, 0, 1774
	.word	0, 140000, 37777, 0, 0, 177700, 0
WSP015:	.word	0, 7400, 0, 0, 7400, 0, 0, 7400
	.word	0, 0, 7760, 0, 0, 177777, 0, 0
	.word	177777, 17, 0, 177777, 17, 0, 177417, 17
	.word	0, 7400, 17, 0, 7400, 0, 0, 7760
	.word	0, 0, 177777, 0, 0, 177400, 3
WSP016:	.word	0, 36000, 0, 0, 36000, 0, 0, 36000
	.word	0, 0, 37700, 0, 0, 177774, 3, 0
	.word	177774, 77, 0, 177774, 77, 0, 176074, 77
	.word	0, 36000, 74, 0, 36000, 0, 0, 37700
	.word	0, 0, 177774, 3, 0, 176000, 17
WSP017:	.word	0, 170000, 0, 0, 170000, 0, 0, 170000
	.word	0, 0, 177400, 0, 0, 177760, 17, 0
	.word	177760, 377, 0, 177760, 377, 0, 170360, 377
	.word	0, 170000, 360, 0, 170000, 0, 0, 177400
	.word	0, 0, 177760, 17, 0, 170000, 77

WSP020:	.word	140000, 3, 0, 140000, 3, 0, 140000, 3
	.word	0, 140000, 77, 0, 176000, 1777, 0, 177700
	.word	1777, 0, 177700, 1777, 0, 177700, 1703, 0
	.word	141700, 3, 0, 140000, 3, 0, 140000, 77
	.word	0, 176000, 1777, 0, 177400, 3, 0
WSP021:	.word	0, 17, 0, 0, 17, 0, 0, 17
	.word	0, 0, 377, 0, 170000, 7777, 0, 177400
	.word	7777, 0, 177400, 7777, 0, 177400, 7417, 0
	.word	7400, 17, 0, 0, 17, 0, 0, 377
	.word	0, 170000, 7777, 0, 176000, 17, 0
WSP022:	.word	0, 74, 0, 0, 74, 0, 0, 74
	.word	0, 0, 1774, 0, 140000, 37777, 0, 176000
	.word	37777, 0, 176000, 37777, 0, 176000, 36077, 0
	.word	36000, 74, 0, 0, 74, 0, 0, 1774
	.word	0, 140000, 37777, 0, 170000, 77, 0
WSP023:	.word	0, 360, 0, 0, 360, 0, 0, 360
	.word	0, 0, 7760, 0, 0, 177777, 0, 170000
	.word	177777, 0, 170000, 177777, 0, 170000, 170377, 0
	.word	170000, 360, 0, 0, 360, 0, 0, 7760
	.word	0, 0, 177777, 0, 140000, 377, 0
WSP024:	.word	0, 1700, 0, 0, 1700, 0, 0, 1700
	.word	0, 0, 37700, 0, 0, 177774, 3, 140000
	.word	177777, 3, 140000, 177777, 3, 140000, 141777, 3
	.word	140000, 1703, 0, 0, 1700, 0, 0, 37700
	.word	0, 0, 177774, 3, 0, 1777, 0
WSP025:	.word	0, 7400, 0, 0, 7400, 0, 0, 7400
	.word	0, 0, 177400, 0, 0, 177760, 17, 0
	.word	177777, 17, 0, 177777, 17, 0, 7777, 17
	.word	0, 7417, 0, 0, 7400, 0, 0, 177400
	.word	0, 0, 177760, 17, 0, 7774, 0
WSP026:	.word	0, 36000, 0, 0, 36000, 0, 0, 36000
	.word	0, 0, 176000, 3, 0, 177700, 77, 0
	.word	177774, 77, 0, 177774, 77, 0, 37774, 74
	.word	0, 36074, 0, 0, 36000, 0, 0, 176000
	.word	3, 0, 177700, 77, 0, 37760, 0
WSP027:	.word	0, 170000, 0, 0, 170000, 0, 0, 170000
	.word	0, 0, 170000, 17, 0, 177400, 377, 0
	.word	177760, 377, 0, 177760, 377, 0, 177760, 360
	.word	0, 170360, 0, 0, 170000, 0, 0, 170000
	.word	17, 0, 177400, 377, 0, 177700, 0


; plane's explosion
WSPT05:	.word	WSP050, WSP052, WSP054, WSP056
WSPT06:	.word	WSP060, WSP062, WSP064, WSP066

WSP050:	.word	0, 0, 0, 36000, 0, 0, 0, 0
	.word	0, 0, 360, 0, 7400, 0, 0, 140000
	.word	3, 0, 0, 1700, 0, 36000, 0, 0
	.word	0, 7400, 0, 0, 17, 0, 7400, 0
	.word	0, 0, 0, 0, 0, 0, 0
WSP052:	.word	0, 0, 0, 140000, 3, 0, 0, 0
	.word	0, 0, 7400, 0, 170000, 0, 0, 0
	.word	74, 0, 0, 36000, 0, 140000, 3, 0
	.word	0, 170000, 0, 0, 360, 0, 170000, 0
	.word	0, 0, 0, 0, 0, 0, 0
WSP054:	.word	0, 0, 0, 0, 74, 0, 0, 0
	.word	0, 0, 170000, 0, 0, 17, 0, 0
	.word	1700, 0, 0, 140000, 3, 0, 74, 0
	.word	0, 0, 17, 0, 7400, 0, 0, 17
	.word	0, 0, 0, 0, 0, 0, 0
WSP056:	.word	0, 0, 0, 0, 1700, 0, 0, 0
	.word	0, 0, 0, 17, 0, 360, 0, 0
	.word	36000, 0, 0, 0, 74, 0, 1700, 0
	.word	0, 0, 360, 0, 170000, 0, 0, 360
	.word	0, 0, 0, 0, 0, 0, 0
WSP060:	.word	140000, 3, 0, 0, 0, 0, 1700, 1700
	.word	0, 170000, 0, 0, 360, 0, 0, 0
	.word	7417, 0, 7400, 0, 0, 0, 0, 0
	.word	74, 74, 0, 36000, 36000, 0, 0, 17
	.word	0, 7400, 0, 0, 0, 360, 0
WSP062:	.word	0, 74, 0, 0, 0, 0, 36000, 36000
	.word	0, 0, 17, 0, 7400, 0, 0, 0
	.word	170360, 0, 170000, 0, 0, 0, 0, 0
	.word	1700, 1700, 0, 140000, 140003, 3, 0, 360
	.word	0, 170000, 0, 0, 0, 7400, 0
WSP064:	.word	0, 1700, 0, 0, 0, 0, 140000, 140003
	.word	3, 0, 360, 0, 170000, 0, 0, 0
	.word	7400, 17, 0, 17, 0, 0, 0, 0
	.word	36000, 36000, 0, 0, 74, 74, 0, 7400
	.word	0, 0, 17, 0, 0, 170000, 0
WSP066:	.word	0, 36000, 0, 0, 0, 0, 0, 74
	.word	74, 0, 7400, 0, 0, 17, 0, 0
	.word	170000, 360, 0, 360, 0, 0, 0, 0
	.word	140000, 140003, 3, 0, 1700, 1700, 0, 170000
	.word	0, 0, 360, 0, 0, 0, 17

; menu data compressed
MenuData:
@packstart
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	25, 0, 100, 125, 125, 124, 125, 1
	.byte	0, 0, 0, 125, 125, 121, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 1
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	0, 0, 0, 0, 0, 125, 125, 1
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 5, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 0, 100, 125, 125, 124, 125, 1
	.byte	0, 0, 0, 125, 125, 121, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 5
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	1, 0, 0, 0, 0, 125, 125, 1
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 1, 100, 125, 125, 124, 125, 5
	.byte	0, 0, 100, 125, 125, 120, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 25
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	5, 0, 0, 0, 100, 125, 125, 5
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 5, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 5, 100, 125, 125, 120, 125, 5
	.byte	0, 0, 100, 125, 125, 120, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 125
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	25, 0, 0, 0, 100, 125, 125, 5
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 25, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 25, 100, 125, 125, 120, 125, 25
	.byte	0, 0, 120, 125, 25, 120, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 125
	.byte	1, 0, 0, 124, 125, 125, 125, 125
	.byte	125, 0, 0, 0, 120, 125, 125, 25
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 125, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 25, 100, 125, 125, 100, 125, 25
	.byte	0, 0, 120, 125, 25, 120, 125, 125
	.byte	125, 125, 120, 125, 125, 125, 125, 125
	.byte	1, 0, 0, 124, 125, 125, 125, 125
	.byte	125, 0, 0, 0, 120, 125, 125, 25
	.byte	0, 0, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 125, 1, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 120
	.byte	125, 125, 100, 125, 125, 100, 125, 125
	.byte	0, 0, 124, 125, 5, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 125, 125
	.byte	5, 0, 0, 124, 125, 1, 100, 125
	.byte	125, 1, 0, 0, 120, 125, 125, 25
	.byte	0, 0, 124, 125, 1, 125, 125, 1
	.byte	120, 125, 125, 5, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 100
	.byte	125, 125, 100, 125, 125, 100, 125, 125
	.byte	0, 0, 124, 125, 5, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 125
	.byte	125, 1, 0, 0, 124, 125, 125, 125
	.byte	0, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 125, 125, 5, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 100
	.byte	125, 125, 100, 125, 125, 0, 125, 125
	.byte	1, 0, 125, 125, 5, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 125
	.byte	125, 1, 0, 0, 124, 125, 125, 125
	.byte	0, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 124, 125, 25, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 100
	.byte	125, 125, 100, 125, 125, 0, 125, 125
	.byte	1, 0, 125, 125, 1, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 125
	.byte	125, 1, 0, 0, 125, 125, 125, 125
	.byte	0, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 120, 125, 25, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 100
	.byte	125, 125, 100, 125, 125, 0, 125, 125
	.byte	1, 0, 125, 125, 1, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 125
	.byte	125, 1, 0, 0, 125, 125, 125, 125
	.byte	1, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 100, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 100
	.byte	125, 125, 100, 125, 125, 0, 124, 125
	.byte	5, 100, 125, 125, 0, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 125
	.byte	125, 1, 0, 100, 125, 125, 125, 125
	.byte	1, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 100, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 120
	.byte	125, 125, 100, 125, 125, 0, 124, 125
	.byte	5, 100, 125, 125, 0, 120, 125, 125
	.byte	125, 25, 120, 125, 5, 0, 125, 125
	.byte	5, 0, 0, 124, 125, 1, 100, 125
	.byte	125, 1, 0, 100, 125, 125, 124, 125
	.byte	5, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 0, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 25, 100, 125, 125, 0, 124, 125
	.byte	25, 120, 125, 25, 0, 120, 125, 125
	.byte	125, 25, 120, 125, 125, 125, 125, 125
	.byte	1, 0, 0, 124, 125, 125, 125, 125
	.byte	125, 0, 0, 100, 125, 125, 124, 125
	.byte	5, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 0, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	125, 5, 100, 125, 125, 0, 120, 125
	.byte	125, 124, 125, 25, 0, 120, 125, 125
	.byte	125, 25, 120, 125, 125, 125, 125, 125
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	25, 0, 0, 120, 125, 25, 120, 125
	.byte	25, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 0, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	25, 0, 100, 125, 125, 0, 100, 125
	.byte	125, 125, 125, 5, 0, 120, 125, 125
	.byte	125, 25, 120, 125, 125, 125, 125, 1
	.byte	0, 0, 0, 124, 125, 125, 125, 125
	.byte	0, 0, 0, 124, 125, 5, 100, 125
	.byte	25, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 0, 125, 125, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 125, 125
	.byte	5, 0, 100, 125, 125, 0, 0, 125
	.byte	125, 125, 125, 1, 0, 120, 125, 5
	.byte	0, 0, 120, 125, 125, 125, 125, 0
	.byte	0, 0, 0, 124, 125, 125, 125, 25
	.byte	0, 0, 0, 125, 125, 125, 125, 125
	.byte	125, 0, 124, 125, 1, 125, 125, 1
	.byte	0, 100, 125, 25, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 120, 125
	.byte	125, 0, 100, 125, 125, 0, 0, 124
	.byte	125, 125, 125, 0, 0, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 124, 125, 5
	.byte	0, 0, 0, 124, 125, 101, 125, 125
	.byte	1, 0, 100, 125, 125, 125, 125, 125
	.byte	125, 1, 124, 125, 1, 125, 125, 1
	.byte	0, 124, 125, 25, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 100, 125
	.byte	125, 1, 100, 125, 125, 0, 0, 120
	.byte	125, 125, 25, 0, 0, 120, 125, 5
	.byte	0, 0, 120, 125, 5, 120, 125, 25
	.byte	0, 0, 0, 124, 125, 1, 125, 125
	.byte	5, 0, 120, 125, 125, 125, 125, 125
	.byte	125, 5, 124, 125, 1, 125, 125, 1
	.byte	120, 125, 125, 5, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 124
	.byte	125, 25, 100, 125, 125, 0, 0, 100
	.byte	125, 125, 5, 0, 0, 120, 125, 125
	.byte	125, 125, 120, 125, 5, 100, 125, 125
	.byte	0, 0, 0, 124, 125, 1, 120, 125
	.byte	125, 0, 120, 125, 25, 0, 0, 124
	.byte	125, 5, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 125, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 120
	.byte	125, 125, 100, 125, 125, 0, 0, 0
	.byte	125, 125, 1, 0, 0, 120, 125, 125
	.byte	125, 125, 120, 125, 5, 0, 125, 125
	.byte	1, 0, 0, 124, 125, 1, 100, 125
	.byte	125, 1, 124, 125, 5, 0, 0, 120
	.byte	125, 25, 124, 125, 1, 125, 125, 125
	.byte	125, 125, 1, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 0, 0, 0, 0
	.byte	0, 0, 0, 0, 125, 125, 0, 0
	.byte	125, 125, 105, 125, 125, 0, 0, 0
	.byte	124, 125, 0, 0, 0, 120, 125, 125
	.byte	125, 125, 120, 125, 5, 0, 124, 125
	.byte	5, 0, 0, 124, 125, 1, 0, 124
	.byte	125, 25, 125, 125, 1, 0, 0, 100
	.byte	125, 125, 124, 125, 1, 125, 125, 125
	.byte	125, 5, 0, 0, 0, 0, 0, 0
@packend

	.even
	.word	123456
End:
	.end	Start
